{"version":3,"sources":["../../src/app/group-widgets/GroupMembers.tsx"],"names":["React","useState","useEffect","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","Button","Tooltip","DataListAction","Pagination","Dropdown","BadgeToggle","DropdownItem","Badge","Modal","Checkbox","GroupsServiceClient","ConfirmationModal","SearchInput","CheckIcon","GroupMembers","props","groupMembers","setGroupMembers","page","setPage","perPage","setPerPage","totalItems","setTotalItems","modalInfo","setModalInfo","statusSelection","setStatusSelection","roleSelection","setRoleSelection","editMemberRoles","setEditMemberRoles","groupsService","fetchGroupMembers","isOpen","setIsOpen","status","roles","onToggle","open","type","onFocus","element","document","getElementById","focus","onSelect","onSetPage","_event","newPage","onPerPageSelect","newPerPage","searchString","undefined","doGet","groupId","params","length","then","response","data","count","results","deleteGroupMember","memberId","doDelete","suspendGroupMember","doPost","activateGroupMember","noMembers","groupConfiguration","groupRoles","e","map","role","toLowerCase","member","index","user","attributes","voPersonID","username","firstName","lastName","email","membershipExpiresAt","id","userId","title","accept_message","cancel_message","message","accept","cancel","EditRolesModal","setIsModalOpen","Object","keys","isModalOpen","handleModalToggle","setMember","deleteGroupMemberRole","indexOf","splice","addGroupMemberRole","name","push","includes"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef} from 'react';\r\nimport {  DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell, Button, Tooltip, DataListAction, Pagination, InputGroup, TextInput, Dropdown, BadgeToggle, DropdownItem, Badge, Modal, Checkbox} from '@patternfly/react-core';\r\n// @ts-ignore\r\nimport { HttpResponse, GroupsServiceClient } from '../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { ConfirmationModal } from './Modal';\r\nimport { SearchInput } from './SearchInput';\r\nimport {CheckIcon } from '@patternfly/react-icons';\r\n//import { TableComposable, Caption, Thead, Tr, Th, Tbody, Td } from '\r\n\r\ninterface FederatedIdentity {\r\n    identityProvider: string;\r\n}\r\n\r\ninterface User {\r\n    id?: string;\r\n    username: string;\r\n    emailVerified: boolean;\r\n    email: string;\r\n    federatedIdentities: FederatedIdentity[];\r\n    firstName: string;\r\n    lastName: string;\r\n    attributes: any;\r\n}\r\n\r\ninterface Memberships {\r\n    id?: string;\r\n    user: User;\r\n    status: string;\r\n    membershipExpiresAt: string;\r\n    groupRoles: string[];\r\n  }\r\n\r\n\r\n\r\nexport const GroupMembers: FC<any> = (props) => {\r\n    const [groupMembers,setGroupMembers] = useState<Memberships[]>([]);\r\n    const [page, setPage] = useState(1);\r\n    const [perPage, setPerPage] = useState(10);\r\n    const [totalItems,setTotalItems] = useState<number>(0);\r\n    const [modalInfo,setModalInfo] = useState({});\r\n    const [statusSelection,setStatusSelection] = useState(\"\");\r\n    const [roleSelection,setRoleSelection] = useState(\"\")\r\n    const [editMemberRoles,setEditMemberRoles] = useState({});\r\n\r\n\r\n\r\n\r\n    let groupsService = new GroupsServiceClient();\r\n    useEffect(()=>{\r\n      fetchGroupMembers();\r\n    },[])\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      setPage(1);\r\n      fetchGroupMembers();\r\n    },[statusSelection]);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n      fetchGroupMembers();\r\n    },[perPage,page]);\r\n\r\n\r\n    const [isOpen, setIsOpen] = React.useState({status:false,roles:false});\r\n\r\n    const onToggle = (open: boolean,type) => {\r\n      isOpen[type] = open;\r\n      setIsOpen({...isOpen});\r\n    };\r\n\r\n    const onFocus = (type) => {\r\n      const element = document.getElementById('toggle-badge-'+type);\r\n      element?.focus();\r\n    };\r\n\r\n    const onSelect = (type) => {\r\n      isOpen[type] = false;\r\n      setIsOpen({...isOpen});\r\n      onFocus(type);\r\n    };\r\n\r\n\r\n\r\n    const onSetPage = (_event: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPage: number) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const onPerPageSelect = (\r\n      _event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\r\n      newPerPage: number,\r\n      newPage: number\r\n    ) => {\r\n      setPerPage(newPerPage);\r\n      setPage(newPage);\r\n    };\r\n    \r\n    let fetchGroupMembers = (searchString = undefined)=>{\r\n      groupsService!.doGet<any>(\"/group-admin/group/\"+props.groupId+\"/members?first=\"+ (perPage*(page-1))+ \"&max=\" + perPage + (searchString?\"&search=\"+searchString:\"\"),{params:statusSelection.length > 0 ? {status:statusSelection}:{}})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200&&response.data){\r\n          setTotalItems(response.data.count);\r\n          setGroupMembers(response.data.results);\r\n        }\r\n      })\r\n    }\r\n\r\n    let deleteGroupMember = (memberId) => {\r\n      groupsService!.doDelete<any>(\"/group-admin/group/\"+props.groupId+\"/member/\"+ memberId)\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          fetchGroupMembers();\r\n        }\r\n      })\r\n    }\r\n    let suspendGroupMember = (memberId) => {\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/member/\"+ memberId+\"/suspend\",{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          fetchGroupMembers();\r\n        }\r\n      })\r\n    }\r\n\r\n    let activateGroupMember = (memberId) => {\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/member/\"+ memberId+\"/activate\",{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          fetchGroupMembers();\r\n        }\r\n      })\r\n    }\r\n\r\n    const noMembers= ()=>{\r\n        return (\r\n          <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n            <DataListItemRow key='emptyRow'>\r\n              <DataListItemCells dataListCells={[\r\n                <DataListCell key='empty'><strong>No group members found</strong></DataListCell>\r\n              ]} />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n        )\r\n      }\r\n    \r\n  \r\n\r\n  \r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <ConfirmationModal modalInfo={modalInfo}/>\r\n        <EditRolesModal member={editMemberRoles} setMember={setEditMemberRoles} groupRoles={props.groupConfiguration?.groupRoles} groupId={props.groupId} fetchGroupMembers={fetchGroupMembers} />\r\n        <SearchInput searchText={\"Search based on Username or Email\"} cancelText={\"View All Group Members\"}search={(searchString)=>{\r\n            fetchGroupMembers(searchString);\r\n            setPage(1);\r\n          }} cancel={()=>{\r\n            fetchGroupMembers();\r\n            setPage(1);\r\n          }} />\r\n        <DataList aria-label=\"Group Member Datalist\" isCompact>\r\n            <DataListItem aria-labelledby=\"compact-item1\">\r\n              <DataListItemRow>\r\n                <DataListItemCells dataListCells={[\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"id-hd\">\r\n                    <strong>Community User Identifier</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"username-hd\">\r\n                    <strong>Username</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"email-hd\">\r\n                    <strong>Name / email</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"email-hd\">\r\n                    <strong>Roles</strong>\r\n                    <Dropdown\r\n                        onSelect={()=>{onSelect('roles')}}\r\n                        toggle={\r\n                          <BadgeToggle id=\"toggle-badge-roles\" onToggle={(e)=>{onToggle(e,'roles')}}>\r\n                            {roleSelection?roleSelection:\"all\"}\r\n                          </BadgeToggle>\r\n                        }\r\n                        className=\"gm_badge_dropdown\"\r\n                        isOpen={isOpen.roles}\r\n                        dropdownItems={[\r\n                          <DropdownItem key=\"all\" component=\"button\" onClick={()=>{setRoleSelection('')}} icon={!roleSelection&&<CheckIcon />}>\r\n                                all\r\n                          </DropdownItem>,\r\n                          ...(props.groupConfiguration && props.groupConfiguration.groupRoles ? props.groupConfiguration.groupRoles.map((role)=>{\r\n                            return (\r\n                              <DropdownItem key={role} component=\"button\" onClick={()=>{setRoleSelection(role)}} icon={roleSelection===role&&<CheckIcon />}>\r\n                                {role}\r\n                              </DropdownItem>\r\n                            )\r\n                          }):[])\r\n                        ]}\r\n                      />\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"expiration-hd\">\r\n                    <strong>Membership Expiration</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={2} key=\"status-hd\">\r\n                    <strong>Status\r\n                      <Dropdown\r\n                        onSelect={()=>{onSelect('status')}}\r\n                        toggle={\r\n                          <BadgeToggle id=\"toggle-badge-status\" onToggle={(e)=>{onToggle(e,'status')}}>\r\n                            {statusSelection===\"ENABLED\"?\"active\":statusSelection?statusSelection.toLowerCase():\"all\"}\r\n                          </BadgeToggle>\r\n                        }\r\n                        className=\"gm_badge_dropdown\"\r\n                        isOpen={isOpen.status}\r\n                        dropdownItems={[                            \r\n                          <DropdownItem key=\"All\" component=\"button\" onClick={()=>{setStatusSelection(\"\")}} icon={!statusSelection&&<CheckIcon />}>\r\n                            All\r\n                          </DropdownItem>,\r\n                          <DropdownItem key=\"Enabled\" component=\"button\" onClick={()=>{setStatusSelection(\"ENABLED\")}} icon={statusSelection===\"ENABLED\"&&<CheckIcon />}>\r\n                            Active\r\n                          </DropdownItem>,\r\n                          <DropdownItem key=\"Suspended\" component=\"button\" onClick={()=>{setStatusSelection(\"SUSPENDED\")}} icon={statusSelection===\"SUSPENDED\"&&<CheckIcon />}>\r\n                            Suspended\r\n                          </DropdownItem>,\r\n                          <DropdownItem key=\"Pending\" component=\"button\" onClick={()=>{setStatusSelection(\"PENDING\")}} icon={statusSelection===\"PENDING\"&&<CheckIcon />}>\r\n                            Pending\r\n                          </DropdownItem>\r\n                        ]}\r\n                      />\r\n                    </strong>\r\n                  </DataListCell>\r\n                ]}>\r\n                </DataListItemCells>\r\n                <DataListAction\r\n                      className=\"gm_cell-center\"\r\n                      aria-labelledby=\"check-action-item1 check-action-action2\"\r\n                      id=\"check-action-action1\"\r\n                      aria-label=\"Actions\"\r\n                      isPlainButtonAction\r\n                    ><div className=\"gm_cell-placeholder\"></div></DataListAction>\r\n              </DataListItemRow>\r\n            </DataListItem>\r\n            {groupMembers.length>0?groupMembers.map((member,index)=>{\r\n              return <DataListItem aria-labelledby={\"member-\"+index}>\r\n                <DataListItemRow>\r\n                  <DataListItemCells\r\n                    dataListCells={[\r\n                      <DataListCell width={3} key=\"primary content\">\r\n                        {member.user?.attributes?.voPersonID||\"Not Available\"}\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} key=\"secondary content \">\r\n                        {member.user.username}\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} key=\"secondary content \">\r\n                        <span className=\"gm_fullname_datalist pf-c-select__menu-item-main\">{member.user.firstName && member.user.lastName?member.user.firstName + \" \" + member.user.lastName:\"Not Available\"}</span>\r\n                        <span className=\"gm_email_datalist pf-c-select__menu-item-description\">{member.user.email}</span>\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} key=\"secondary content \">\r\n                      {member.groupRoles.map((role,index)=>{\r\n                        return <Badge key={index} className=\"gm_role_badge\" isRead>{role}</Badge>\r\n                      })}\r\n                      <Tooltip\r\n                        content={\r\n                          <div>\r\n                            {\"Edit Member Roles\"}\r\n                          </div>\r\n                        }\r\n                      >\r\n                        <div className=\"gm_edit-member-roles\" onClick={()=>{setEditMemberRoles(member);}}><div></div></div>\r\n                      </Tooltip>\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} key=\"secondary content \">\r\n                      {member.membershipExpiresAt||\"Never\"}\r\n                      </DataListCell>,\r\n                      <DataListCell width={2} key=\"secondary content \">\r\n                        <Tooltip\r\n                          content={\r\n                            <div>\r\n                              {member.status==='ENABLED'?\"User is Active\":member.status===\"SUSPENDED\"?\"User is Suspended\":\"\"}\r\n                            </div>\r\n                          }\r\n                        >\r\n                        <div className=\"gm_user-status-container\">\r\n                          <div className={member.status==='ENABLED'?\"gm_icon gm_icon-active-user\":member.status===\"SUSPENDED\"?\"gm_icon gm_icon-suspended-user\":\"\"}></div>\r\n                        </div>\r\n                        </Tooltip>\r\n                      </DataListCell>\r\n                    \r\n                    ]}\r\n                  />\r\n                  <DataListAction\r\n                        className=\"gm_cell-center\"\r\n                        aria-labelledby=\"check-action-item1 check-action-action1\"\r\n                        id=\"check-action-action1\"\r\n                        aria-label=\"Actions\"\r\n                        isPlainButtonAction\r\n                      >\r\n                        <Tooltip\r\n                          content={\r\n                            <div>\r\n                              {member.user.id===props.user.userId?\"Leave Group\":\"Remove Member\"}\r\n                            </div>\r\n                          }\r\n                        >\r\n                          <Button className={\"gm_x-button-small\"} onClick={()=>{\r\n                              setModalInfo({\r\n                                title:\"Confirmation\",\r\n                                accept_message: \"YES\",\r\n                                cancel_message: \"NO\",\r\n                                message: (\"Are you sure you want to remove this user from the group?\"),\r\n                                accept: function(){\r\n                                    deleteGroupMember(member.id);\r\n                                    setModalInfo({})},\r\n                                cancel: function(){\r\n                                    setModalInfo({})}\r\n                              });\r\n                             \r\n                            }}>\r\n                              <div className={\"gm_x-button\"}></div>\r\n                          </Button>\r\n                        </Tooltip>\r\n                        <Tooltip\r\n                          content={\r\n                            <div>\r\n                              {member.status==='ENABLED'?\"Suspend User from Group\":member.status===\"SUSPENDED\"?\"Activate User\":\"\"}\r\n                            </div>\r\n                          }\r\n                        >\r\n                          <Button variant=\"danger\" className={member.status==='ENABLED'?\"gm_ban-button-small\":\"gm_activate-button-small\"} onClick={()=>{\r\n                              setModalInfo({\r\n                                title:\"Confirmation\",\r\n                                accept_message: \"YES\",\r\n                                cancel_message: \"NO\",\r\n                                message: (member.status===\"ENABLED\"?\"Are you sure you want to suspend this user from the group?\":\"Are you sure you want to revoke suspension and ative this user?\"),\r\n                                accept: function(){\r\n                                    if(member.status===\"ENABLED\"){\r\n                                      suspendGroupMember(member.id);\r\n                                    }\r\n                                    else{\r\n                                      activateGroupMember(member.id);\r\n                                    }\r\n                                    setModalInfo({})},\r\n                                cancel: function(){\r\n                                    setModalInfo({})}\r\n                              });\r\n                             \r\n                            }}>\r\n                              <div className={member.status===\"ENABLED\"?\"gm_lock-button\":\"gm_activate-button\"}></div>\r\n                          </Button>\r\n                        </Tooltip>\r\n                    </DataListAction>\r\n                </DataListItemRow>\r\n              </DataListItem>\r\n            }):noMembers()}\r\n          </DataList>\r\n          <Pagination\r\n            itemCount={totalItems}\r\n            perPage={perPage}\r\n            page={page}\r\n            onSetPage={onSetPage}\r\n            widgetId=\"top-example\"\r\n            onPerPageSelect={onPerPageSelect}\r\n          />     \r\n        </React.Fragment>         \r\n   \r\n    )\r\n  }\r\n\r\n\r\n  interface EditRolesModalProps {\r\n    member: any;\r\n    setMember: any;\r\n    groupRoles:any;\r\n    groupId:any;\r\n    fetchGroupMembers:any;\r\n};\r\n\r\n\r\nconst EditRolesModal: React.FC<EditRolesModalProps> = (props) =>{\r\n    let groupsService = new GroupsServiceClient();\r\n\r\n    useEffect(()=>{\r\n      setIsModalOpen(Object.keys(props.member).length > 0);\r\n  },[props.member])\r\n\r\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n\r\n    const handleModalToggle = () => {\r\n        props?.setMember({});\r\n    };\r\n\r\n\r\n    let deleteGroupMemberRole = (role) => {\r\n      groupsService!.doDelete<any>(\"/group-admin/group/\"+props.groupId+\"/member/\"+ props.member?.id+\"/role/\" + role)\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          const index = props.member.groupRoles.indexOf(role);\r\n          if (index > -1) { // only splice array when item is found\r\n            props.member.groupRoles.splice(index, 1); // 2nd parameter means remove one item only\r\n          }\r\n          props.setMember({...props.member});\r\n          props.fetchGroupMembers();\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n    let addGroupMemberRole = (role) => {\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/member/\"+ props.member?.id+ \"/role?name=\"+role,{params:{name:role}})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          props.member.groupRoles.push(role);\r\n          props.setMember({...props.member});\r\n          props.fetchGroupMembers();\r\n        }\r\n      })\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Modal\r\n            variant={\"small\"}\r\n            title={\"Edit Μember Roles\"}\r\n            isOpen={isModalOpen}\r\n            onClose={handleModalToggle}\r\n            actions={[\r\n                <Button key=\"confirm\" variant=\"primary\" onClick={()=>{props.setMember({})}}>\r\n                    Ok\r\n                </Button>\r\n            ]}\r\n            >\r\n                 <table className=\"gm_roles-table gm_table-center\">\r\n                    <tbody>\r\n                      {props.groupRoles?.map((role,index)=>{\r\n                          return <tr>\r\n                              <td>\r\n                                  {role}\r\n                              </td>\r\n                              <td>\r\n                                <Checkbox id=\"standalone-check\" name=\"standlone-check\" checked={props.member?.groupRoles?.includes(role)} onClick={()=>{\r\n                                  if(props.member?.groupRoles?.includes(role)){\r\n                                    deleteGroupMemberRole(role);\r\n                                  }\r\n                                  else{\r\n                                    addGroupMemberRole(role);\r\n                                  }\r\n                                }} aria-label=\"Standalone input\" />\r\n                              </td>   \r\n                          </tr>                    \r\n                      })}\r\n                  </tbody>\r\n                  </table>\r\n            </Modal>\r\n        </React.Fragment>   );\r\n}\r\n  "],"file":"GroupMembers.js"}