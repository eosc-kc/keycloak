{"version":3,"sources":["../../../src/app/group-widgets/GroupAdminPage/GroupAttributes.tsx"],"names":["React","useState","useEffect","useRef","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","Button","Tooltip","DataListAction","TextInput","ConfirmationModal","GroupAttributes","props","attributeRef","attributeKeyInput","setAttributeKeyInput","attributeValueInput","setAttributeValueInput","attributes","setAttributes","groupConfiguration","modalInfo","setModalInfo","Object","keys","map","attribute","e","key","current","click","title","accept_message","cancel_message","message","accept","updateAttributes","cancel","fetchGroupConfiguration"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef} from 'react';\r\nimport {  DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell, Button, Tooltip, DataListAction, Pagination, TextInput} from '@patternfly/react-core';\r\n// @ts-ignore\r\n// @ts-ignore\r\nimport { ConfirmationModal } from '../Modal';\r\n//import { TableComposable, Caption, Thead, Tr, Th, Tbody, Td } from '\r\n\r\n\r\n\r\nexport const GroupAttributes: FC<any> = (props) => {\r\n    const attributeRef = useRef<any>(null);\r\n    const [attributeKeyInput,setAttributeKeyInput] = useState<string>(\"\");\r\n    const [attributeValueInput,setAttributeValueInput] = useState<string>(\"\");\r\n    const [attributes,setAttributes] = useState<any>(props.groupConfiguration.attributes||{});\r\n    const [modalInfo,setModalInfo] = useState({});\r\n\r\n\r\n    useEffect(()=>{\r\n        setAttributes(props.groupConfiguration.attributes||{})\r\n      },[props.groupConfiguration])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ConfirmationModal modalInfo={modalInfo}/>\r\n            <DataList aria-label=\"Compact data list example\" isCompact>\r\n                <DataListItem aria-labelledby=\"compact-item1\">\r\n                    <DataListItemRow>\r\n                        <DataListItemCells dataListCells={[\r\n                            <DataListCell width={2} key=\"key-hd\"><strong>Key</strong></DataListCell>,\r\n                            <DataListCell width={3} key=\"value-hd\"><strong>Value</strong></DataListCell>\r\n                        ]}>\r\n                        </DataListItemCells>\r\n                        <DataListAction \r\n                            className=\"gm_cell-center\" \r\n                            aria-labelledby=\"check-action-item1 check-action-action2\"\r\n                            id=\"check-action-action1\"\r\n                            aria-label=\"Actions\"\r\n                            isPlainButtonAction\r\n                        >\r\n                            <div className=\"gm_cell-placeholder\"></div>\r\n                        </DataListAction>   \r\n                    </DataListItemRow>\r\n                </DataListItem>\r\n                {attributes&&Object.keys(attributes).map(attribute=>{\r\n                    return <DataListItem aria-labelledby={attribute}>\r\n                        <DataListItemRow>\r\n                            <DataListItemCells\r\n                                dataListCells={[\r\n                                    <DataListCell width={2} key=\"primary content\"><strong>{attribute}</strong></DataListCell>,\r\n                                    <DataListCell width={3} key=\"secondary content \"><TextInput value={attributes[attribute]} onChange={(e)=>{\r\n                                        attributes[attribute] = [e];\r\n                                        setAttributes({...attributes})\r\n                                        }}/>    \r\n                                    </DataListCell>\r\n                                ]}\r\n                            />\r\n                            <DataListAction\r\n                                className=\"gm_cell-center\"\r\n                                aria-labelledby=\"check-action-item1 check-action-action1\"\r\n                                id=\"check-action-action1\"\r\n                                aria-label=\"Actions\"\r\n                                isPlainButtonAction\r\n                            >\r\n                                <Tooltip content={<div>Remove Attribute</div>}>\r\n                                    <Button variant=\"danger\" className={\"gm_x-button-small\"} \r\n                                        onClick={()=>{\r\n                                            delete attributes[attribute];\r\n                                            setAttributes({...attributes});\r\n                                        }}\r\n                                    >\r\n                                        <div className={\"gm_x-button\"}></div>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </DataListAction>\r\n                        </DataListItemRow>\r\n                    </DataListItem>\r\n                })}\r\n                <DataListItem aria-labelledby='attribute-input'>\r\n                    <DataListItemRow>\r\n                        <DataListItemCells\r\n                            dataListCells={[\r\n                            <DataListCell width={2} key=\"key-input\">\r\n                                <span id=\"compact-item1\">                              \r\n                                    <TextInput id=\"textInput-basic-1\" value={attributeKeyInput} placeholder='Add Attribute Key' onKeyDown={(e)=>{e.key=== 'Enter'&&attributeRef?.current?.click();}} type=\"text\" aria-label=\"text input field\" onChange={(e)=>{setAttributeKeyInput(e);}} />\r\n                                </span>\r\n                            </DataListCell>,\r\n                            <DataListCell width={3} key=\"value-input\">\r\n                                <span id=\"item2\">\r\n                                    <TextInput id=\"textInput-basic-2\" value={attributeValueInput} placeholder='Add Attribute Value' onKeyDown={(e)=>{e.key=== 'Enter'&&attributeRef?.current?.click();}} type=\"text\" aria-label=\"text input field\" onChange={(e)=>{setAttributeValueInput(e);}} />                                \r\n                                </span>\r\n                            </DataListCell>\r\n                            ]}\r\n\r\n                        />\r\n                        <DataListAction\r\n                            className=\"gm_cell-center\"\r\n                            aria-labelledby=\"check-action-item1 check-action-action1\"\r\n                            id=\"check-action-action1\"\r\n                            aria-label=\"Actions\"\r\n                            isPlainButtonAction\r\n                        >\r\n                            <Tooltip content={<div>Add Attribute</div>}>\r\n                                <Button className={\"gm_plus-button-small\"} ref={attributeRef} \r\n                                    onClick={()=>{\r\n                                        if(attributeKeyInput){\r\n                                            attributes[attributeKeyInput] = [attributeValueInput];\r\n                                            setAttributes({...attributes})\r\n                                            setAttributeKeyInput(\"\");\r\n                                            setAttributeValueInput(\"\");\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <div className={\"gm_plus-button\"}></div>\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </DataListAction>\r\n                    </DataListItemRow>\r\n                </DataListItem>\r\n            </DataList>\r\n                <div className={\"gm_attribute-controls\"}>\r\n                <Button  className={\"\"} onClick={()=>{\r\n                     setModalInfo({\r\n                        title:\"Confirmation\",\r\n                        accept_message: \"YES\",\r\n                        cancel_message: \"NO\",\r\n                        message: (\"Save changes made to the service attributes?\"),\r\n                        accept: function(){\r\n                            props.groupConfiguration.attributes = attributes;\r\n                            props.updateAttributes(props.groupConfiguration)\r\n                            setModalInfo({})},\r\n                        cancel: function(){\r\n                            props.fetchGroupConfiguration()\r\n                            setModalInfo({})}\r\n                    });\r\n                }}>Save</Button>\r\n                <Button variant={\"tertiary\"} className={\"\"} onClick={()=>{props.fetchGroupConfiguration()}}>Cancel</Button>\r\n                </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n    }\r\n"],"file":"GroupAttributes.js"}