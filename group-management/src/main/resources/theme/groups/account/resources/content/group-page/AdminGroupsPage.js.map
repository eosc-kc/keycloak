{"version":3,"sources":["../../../src/app/content/group-page/AdminGroupsPage.tsx"],"names":["React","useState","useEffect","DataListContent","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","Breadcrumb","BreadcrumbItem","Pagination","Link","ContentPage","GroupsServiceClient","Msg","SearchInput","AdminGroupsPage","props","groupsService","groups","setGroups","page","setPage","perPage","setPerPage","totalItems","setTotalItems","onSetPage","_event","newPage","onPerPageSelect","newPerPage","fetchAdminGroups","searchString","undefined","doGet","params","test","then","response","count","data","results","emptyGroup","localize","length","map","group","appIndex","GroupListItem","depth","setExpanded","expanded","extraSubGroups","id","name","path","subGroup","appSubIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect} from 'react';\r\nimport {DataListContent, DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell,Breadcrumb, BreadcrumbItem,Pagination} from '@patternfly/react-core';\r\nimport {Link} from 'react-router-dom';\r\n//import { fa-search } from '@patternfly/react-icons';\r\n//import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// @ts-ignore\r\nimport { ContentPage } from '../ContentPage';\r\nimport { HttpResponse, GroupsServiceClient } from '../../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { Msg } from '../../widgets/Msg';\r\nimport { SearchInput } from '../../group-widgets/GroupAdminPage/SearchInput';\r\n\r\nexport interface AdminGroupsPageProps {\r\n  match :any;\r\n}\r\n\r\nexport interface AdminGroupsPageState {\r\n  groups: AdminGroup[];\r\n  directGroups: AdminGroup[];\r\n  isDirectMembership: boolean;\r\n}\r\n\r\ninterface AdminGroup{\r\n  id? : string;\r\n  name: string;\r\n  path: string;\r\n  extraSubGroups: AdminGroup[];\r\n}\r\n\r\ninterface User {\r\n\r\n}\r\n\r\ninterface Response {\r\n  results: AdminGroup[],\r\n  count: BigInteger;\r\n}\r\n\r\ninterface User {\r\n  userId?: string;\r\n  displayName: string;\r\n}\r\n\r\nexport const AdminGroupsPage: FC<AdminGroupsPageProps> = (props) =>{\r\n// export class AdminGroupsPage extends React.Component<AdminGroupsPageProps, AdminGroupsPageState> {\r\n\r\n  let groupsService = new GroupsServiceClient();\r\n \r\n\r\n  const [groups,setGroups] = useState([] as AdminGroup[]);\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [totalItems,setTotalItems] = useState<number>(0);\r\n\r\n  const onSetPage = (_event: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const onPerPageSelect = (\r\n    _event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\r\n    newPerPage: number,\r\n    newPage: number\r\n  ) => {\r\n    setPerPage(newPerPage);\r\n    setPage(newPage);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    fetchAdminGroups();\r\n  },[perPage,page]);\r\n  \r\n\r\n\r\n  useEffect(()=>{\r\n    fetchAdminGroups();\r\n  },[]);\r\n\r\n\r\n\r\n  let fetchAdminGroups= (searchString = undefined)=> {\r\n\r\n    groupsService!.doGet<Response>(\"/group-admin/groups?first=\"+ (perPage*(page-1))+ \"&max=\" + perPage + (searchString?\"&search=\"+searchString:\"\"),{params:{test:\"test\"}})\r\n      .then((response: HttpResponse<Response>) => {\r\n        let count = response?.data?.count||0;\r\n        setTotalItems(count as number);\r\n        setGroups(response?.data?.results||[] as AdminGroup[]);\r\n        //setExpandedIds([]);        \r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n  const emptyGroup= ()=>{\r\n    return (\r\n      <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n        <DataListItemRow key='emptyRow'>\r\n          <DataListItemCells dataListCells={[\r\n            <DataListCell key='empty'><strong>No groups found</strong></DataListCell>\r\n          ]} />\r\n        </DataListItemRow>\r\n      </DataListItem>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n      <div className=\"gm_content\">\r\n        <Breadcrumb className=\"gm_breadcumb\">\r\n            <BreadcrumbItem to=\"#\">\r\n              Account Console\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem isActive>\r\n              {Msg.localize('adminGroupLabel')}\r\n            </BreadcrumbItem>\r\n        </Breadcrumb> \r\n        <ContentPage title={Msg.localize('adminGroupLabel')}>\r\n          <SearchInput searchText={\"Search based on Group Name\"} cancelText={\"View All Groups\"}  search={(searchString)=>{\r\n            fetchAdminGroups(searchString);\r\n            setPage(1);\r\n          }} />\r\n  \r\n          <DataList id=\"groups-list\" aria-label={Msg.localize('groupLabel')} isCompact>\r\n            \r\n            <DataListItem id=\"groups-list-header\" aria-labelledby=\"Columns names\">\r\n            \r\n              <DataListItemRow className=\"gm_datalist-header\">\r\n                <DataListItemCells\r\n                  dataListCells={[\r\n                    <DataListCell key='group-name-header' width={2}>\r\n                      <strong><Msg msgKey='Name' /></strong>\r\n                    </DataListCell>,\r\n                    <DataListCell key='group-path-header' width={2}>\r\n                      <strong><Msg msgKey='Path' /></strong>\r\n                    </DataListCell>\r\n                  ]}\r\n                />\r\n              </DataListItemRow>\r\n            </DataListItem>\r\n            {groups.length===0 ?\r\n              emptyGroup():\r\n              groups.map((group:AdminGroup,appIndex:number)=>{\r\n                return(\r\n                <GroupListItem group={group as AdminGroup} appIndex={appIndex} depth={0} />\r\n                )\r\n              })\r\n              }\r\n          </DataList>\r\n          <Pagination\r\n            itemCount={totalItems}\r\n            perPage={perPage}\r\n            page={page}\r\n            onSetPage={onSetPage}\r\n            widgetId=\"top-example\"\r\n            onPerPageSelect={onPerPageSelect}\r\n          />\r\n        </ContentPage>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  export interface GroupListItemProps {\r\n    group: AdminGroup,\r\n    appIndex: number;\r\n    depth:number;\r\n  }\r\n  \r\n \r\n  const GroupListItem: FC<GroupListItemProps> = ({group,appIndex,depth}) =>{\r\n    useEffect(()=>{\r\n      setExpanded(false);\r\n    },[group]);\r\n    const [expanded,setExpanded]= useState<boolean>(false);\r\n\r\n    return(     \r\n        <DataListItem id={`${appIndex}-group`} key={'group-' + appIndex} className={\"gm_expandable-list\" + (group?.extraSubGroups.length>0?\" gm_expandable-list-item\":\"\")} aria-labelledby=\"groups-list\" isExpanded={expanded}>\r\n          <DataListItemRow style={{\"paddingLeft\": ((depth===0?2:(3+depth-1))+ (group?.extraSubGroups.length>0?0:0.4))+\"rem\"}}>\r\n            {group?.extraSubGroups.length>0?\r\n              <div className={\"gm_epxand-toggle\"} onClick={() => {setExpanded(!expanded)}}>\r\n                <div className={expanded?\"gm_epxand-toggle-expanded\":\"gm_epxand-toggle-hidden\"}></div>\r\n              </div>\r\n            :null}\r\n            <Link to={\"/groups/admingroups/\"+group.id}>\r\n            <DataListItemCells\r\n              dataListCells={[\r\n                <DataListCell id={`${appIndex}-group-name`} width={2} key={'name-' + appIndex}>\r\n                  {group.name}\r\n                </DataListCell>,\r\n                <DataListCell id={`${appIndex}-group-path`} width={2} key={'path-' + appIndex}>\r\n                  {group.path}\r\n                </DataListCell>\r\n              ]}\r\n            />\r\n            </Link>\r\n          </DataListItemRow>\r\n          <DataListContent\r\n            aria-label=\"First expandable content details\"\r\n            id=\"ex-expand1\"\r\n            isHidden={!expanded}\r\n          >\r\n            {group?.extraSubGroups.length>0?group?.extraSubGroups.map((subGroup:AdminGroup,appSubIndex:number)=>{\r\n                return(\r\n                  <GroupListItem group={subGroup as AdminGroup} appIndex={appSubIndex} depth={depth+1} />\r\n                )\r\n              }):null}\r\n          </DataListContent>\r\n        </DataListItem>\r\n    )\r\n  }\r\n"],"file":"AdminGroupsPage.js"}