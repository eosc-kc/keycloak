{"version":3,"sources":["../../../src/app/group-widgets/GroupAdminPage/InviteMemberModal.tsx"],"names":["React","useState","useEffect","useRef","GroupsServiceClient","ValidateEmail","Alert","Button","Checkbox","DataList","DataListCell","DataListItem","DataListItemCells","DataListItemRow","FormAlert","Modal","ModalVariant","Select","SelectOption","SelectVariant","Spinner","Wizard","InviteMemberModal","props","groupsService","stepIdReached","setStepIdReached","isStep1Complete","setIsStep1Complete","isStep2Complete","setIsStep2Complete","invitationData","setInvitationData","groupEnrollmentConfiguration","groupRoles","withoutAcceptance","invitationResult","setInvitationResult","isModalOpen","setIsModalOpen","loading","setLoading","active","onNext","id","orderIndex","split","parseInt","sendInvitation","doPost","groupId","then","response","status","catch","err","console","log","closeWizard","setActive","steps","name","component","enableNext","nextButtonText","canJumpTo","title","medium","EnrollmentStep","toggleRef","groupEnrollments","setGroupEnrollments","isOpen","setIsOpen","selected","setSelected","enrollment","setEnrollment","fetchGroupEnrollments","length","onToggle","clearSelection","onSelect","event","selection","isPlaceholder","current","focus","doGet","data","roleHandler","role","includes","index","indexOf","splice","push","single","map","membershipExpirationDays","EmailStep","inviteAddress","setInviteAddress","emailError","setEmailError","showEmailError","setShowEmailError","options","setOptions","fetchGroupMembers","email","selectUser","username","forEach","user","value","description","open","searchString","params","max","search","members","results","membership","getUserIdentifier","firstName","lastName","typeahead","e","filterOptions","option","disabled","ResponseModal","small","close","Loading","large"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ;AACA,SAAWC,QAAX,EAAoBC,SAApB,EAA8BC,MAA9B,2D,CACA;;AACA,SAAuBC,mBAAvB,uD,CACA;;AAIA;AACA,SAAQC,aAAR;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,YAA5C,EAA0DC,YAA1D,EAAwEC,iBAAxE,EAA2FC,eAA3F,EAA4GC,SAA5G,EAAuHC,KAAvH,EAA8HC,YAA9H,EAA4IC,MAA5I,EAAoJC,YAApJ,EAAkKC,aAAlK,EAAiLC,OAAjL,EAAqMC,MAArM;AAKA,OAAO,MAAMC,iBAAgC,GAAIC,KAAD,IAAW;AAGvD,MAAIC,aAAa,GAAG,IAAIpB,mBAAJ,EAApB;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoC1B,KAAK,CAACC,QAAN,CAAe,CAAf,CAA1C;AACA,QAAM,CAAC0B,eAAD,EAAiBC,kBAAjB,IAAuC3B,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAAC4B,eAAD,EAAiBC,kBAAjB,IAAuC7B,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAAC8B,cAAD,EAAgBC,iBAAhB,IAAqC/B,QAAQ,CAAC;AAClDgC,IAAAA,4BAA4B,EAAE,EADoB;AAElDC,IAAAA,UAAU,EAAE,EAFsC;AAGlDC,IAAAA,iBAAiB,EAAC;AAHgC,GAAD,CAAnD;AAKA,QAAM,CAACC,gBAAD,EAAkBC,mBAAlB,IAAyCpC,QAAQ,CAAM,EAAN,CAAvD;AACA,QAAM,CAACqC,WAAD,EAAaC,cAAb,IAA+BtC,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM,CAACuC,OAAD,EAASC,UAAT,IAAuBxC,QAAQ,CAAC,KAAD,CAArC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZqC,IAAAA,cAAc,CAAChB,KAAK,CAACmB,MAAP,CAAd;AACD,GAFQ,EAEP,CAACnB,KAAK,CAACmB,MAAP,CAFO,CAAT;;AAIA,QAAMC,MAAM,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAwB;AACrC,QAAIA,EAAJ,EAAQ;AACN,UAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AAC1B,cAAM,GAAGC,UAAH,IAAiBD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAvB;AACAF,QAAAA,EAAE,GAAGG,QAAQ,CAACF,UAAD,CAAb;AACD;;AAEDnB,MAAAA,gBAAgB,CAACD,aAAa,GAAGmB,EAAhB,GAAqBA,EAArB,GAA0BnB,aAA3B,CAAhB;AAED;AACF,GAVD;;AAYA,QAAMuB,cAAc,GAAG,MAAI;AACzBP,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAjB,IAAAA,aAAa,CAAEyB,MAAf,CAA2B,wBAAsB1B,KAAK,CAAC2B,OAA5B,GAAoC,qBAA/D,EAAqF,EAAC,GAAGnB;AAAJ,KAArF,EACCoB,IADD,CACOC,QAAD,IAAiC;AACrC,UAAGA,QAAQ,CAACC,MAAT,KAAkB,GAAlB,IAAuBD,QAAQ,CAACC,MAAT,KAAkB,GAA5C,EAAgD;AAC9ChB,QAAAA,mBAAmB,CAAC,SAAD,CAAnB,CAD8C,CAE9C;AACD,OAHD,MAII;AACFA,QAAAA,mBAAmB,CAAC,OAAD,CAAnB;AACD;;AACDI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD,EAUGa,KAVH,CAUUC,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAVlC;AAWD,GAbD;;AAeA,QAAMG,WAAW,GAAG,MAAM;AACxB;AACAnC,IAAAA,KAAK,CAACoC,SAAN,CAAgB,KAAhB;AACD,GAHD;;AASA,QAAMC,KAAK,GAAG,CACV;AACIhB,IAAAA,EAAE,EAAE,wBADR;AAEIiB,IAAAA,IAAI,EAAE,uCAFV;AAGIC,IAAAA,SAAS,eAAE,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEvC,KAAK,CAAC2B,OAA/B;AAAwC,MAAA,cAAc,EAAEnB,cAAxD;AAAwE,MAAA,iBAAiB,EAAEC,iBAA3F;AAA8G,MAAA,eAAe,EAAEL,eAA/H;AAAgJ,MAAA,kBAAkB,EAAEC;AAApK,MAHf;AAIImC,IAAAA,UAAU,EAAEpC;AAJhB,GADU,EAOV;AACEiB,IAAAA,EAAE,EAAE,wBADN;AAEEiB,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,SAAS,eAAE,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAEvC,KAAK,CAAC2B,OAA1B;AAAmC,MAAA,cAAc,EAAEnB,cAAnD;AAAmE,MAAA,iBAAiB,EAAEC,iBAAtF;AAAyG,MAAA,eAAe,EAAEH,eAA1H;AAA2I,MAAA,kBAAkB,EAAEC;AAA/J,MAHb;AAIEiC,IAAAA,UAAU,EAAElC,eAJd;AAKEmC,IAAAA,cAAc,EAAE,iBALlB;AAMEC,IAAAA,SAAS,EAAExC,aAAa,IAAI;AAN9B,GAPU,CAAd;AAiBE,QAAMyC,KAAK,GAAG,qBAAd;AAKF,sBACE,oBAAC,KAAD,CAAO,QAAP,qBACG,oBAAC,KAAD;AACG,IAAA,OAAO,EAAElD,YAAY,CAACmD,MADzB;AAEG,IAAA,KAAK,EAAE,qBAFV;AAGG,IAAA,MAAM,EAAE7B,WAHX;AAIG,IAAA,OAAO,EAAE,MAAI;AACXf,MAAAA,KAAK,CAACoC,SAAN,CAAgB,KAAhB;AAAwB,KAL7B;AAMG,IAAA,OAAO,EAAE,EANZ;AAOG,IAAA,aAAa,EAAE,MAAI;AACjB,UAAG,EAAEnB,OAAO,IAAE,CAACJ,gBAAZ,CAAH,EAAiC;AAC/Bb,QAAAA,KAAK,CAACoC,SAAN,CAAgB,KAAhB;AACD;AACF;AAXJ,kBAaG,oBAAC,aAAD;AAAe,IAAA,gBAAgB,EAAEvB,gBAAjC;AAAoD,IAAA,KAAK,EAAE,MAAI;AAACsB,MAAAA,WAAW;AAAIrB,MAAAA,mBAAmB,CAAC,EAAD,CAAnB;AAAyB;AAAxG,IAbH,eAcG,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAEG,OAAO,IAAE,CAACJ;AAA3B,IAdH,eAeG,oBAAC,MAAD;AACI,IAAA,YAAY,EAAG,GAAE8B,KAAM,QAD3B;AAEI,IAAA,aAAa,EAAG,GAAEA,KAAM,UAF5B;AAGI,IAAA,OAAO,EAAER,WAHb;AAII,IAAA,KAAK,EAAEE,KAJX;AAKI,IAAA,MAAM,EAAEjB,MALZ;AAMI,IAAA,MAAM,EAAE,GANZ;AAOI,IAAA,MAAM,EAAEK;AAPZ,IAfH,CADH,CADF;AAmCD,CAjHI;;AAoHL,MAAMoB,cAA6B,GAAI7C,KAAD,IAAW;AAC/C,MAAIC,aAAa,GAAG,IAAIpB,mBAAJ,EAApB;AACA,QAAMiE,SAAS,GAAElE,MAAM,CAAM,IAAN,CAAvB;AACA,QAAM,CAACmE,gBAAD,EAAkBC,mBAAlB,IAAyCtE,QAAQ,CAAM,EAAN,CAAvD;AACA,QAAM,CAACuE,MAAD,EAAQC,SAAR,IAAqBxE,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAM,CAACyE,QAAD,EAAUC,WAAV,IAAyB1E,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAAC2E,UAAD,EAAYC,aAAZ,IAA6B5E,QAAQ,CAAM,EAAN,CAA3C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZ4E,IAAAA,qBAAqB;AACtB,GAFQ,EAEP,EAFO,CAAT;AAIA5E,EAAAA,SAAS,CAAC,MAAI;AACZqB,IAAAA,KAAK,CAACK,kBAAN,CAAyBL,KAAK,CAACQ,cAAN,CAAqBE,4BAArB,EAAmDW,EAAnD,IAAuDrB,KAAK,CAACQ,cAAN,CAAqBG,UAArB,CAAgC6C,MAAhC,GAAuC,CAAvH;AACD,GAFQ,EAEP,CAACxD,KAAK,CAACQ,cAAP,CAFO,CAAT;AAKA7B,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAG0E,UAAU,CAAChC,EAAd,EAAiB;AACfrB,MAAAA,KAAK,CAACQ,cAAN,CAAqBE,4BAArB,GAAoD;AAACW,QAAAA,EAAE,EAACgC,UAAU,CAAChC;AAAf,OAApD;AACArB,MAAAA,KAAK,CAACQ,cAAN,CAAqBG,UAArB,GAAiC,EAAjC;AACD,KAHD,MAII;AACFX,MAAAA,KAAK,CAACQ,cAAN,CAAqBE,4BAArB,GAAoD,EAApD;AACAV,MAAAA,KAAK,CAACQ,cAAN,CAAqBG,UAArB,GAAiC,EAAjC;AACD;;AACDX,IAAAA,KAAK,CAACS,iBAAN,CAAwB,EAAC,GAAGT,KAAK,CAACQ;AAAV,KAAxB;AACD,GAVQ,EAUP,CAAC6C,UAAD,CAVO,CAAT;;AAaA,QAAMI,QAAQ,GAAGR,MAAM,IAAI;AACvBC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAFH;;AAIC,QAAMS,cAAc,GAAG,MAAM;AAC1BN,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAF,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHF;;AAQD,QAAMS,QAAQ,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,aAAnB,KAAqC;AAClD,QAAIA,aAAJ,EAAmBJ,cAAc,GAAjC,KACK;AACDN,MAAAA,WAAW,CAACS,SAAD,CAAX;AACAX,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAJ,MAAAA,SAAS,CAACiB,OAAV,CAAkBC,KAAlB;AACH;AACF,GAPH;;AASA,MAAIT,qBAAqB,GAAG,MAAI;AAC5BtD,IAAAA,aAAa,CAAEgE,KAAf,CAA0B,wBAAsBjE,KAAK,CAAC2B,OAA5B,GAAoC,oBAA9D,EACCC,IADD,CACOC,QAAD,IAAiC;AACrC,UAAGA,QAAQ,CAACC,MAAT,KAAkB,GAAlB,IAAuBD,QAAQ,CAACqC,IAAnC,EAAwC;AACtClB,QAAAA,mBAAmB,CAACnB,QAAQ,CAACqC,IAAV,CAAnB;AACD;AACF,KALD;AAMD,GAPH;;AASA,MAAIC,WAAW,GAAIC,IAAD,IAAQ;AACxB,QAAGpE,KAAK,CAACQ,cAAN,CAAqBG,UAArB,CAAgC0D,QAAhC,CAAyCD,IAAzC,CAAH,EAAkD;AAChD,YAAME,KAAK,GAAGtE,KAAK,CAACQ,cAAN,CAAqBG,UAArB,CAAgC4D,OAAhC,CAAwCH,IAAxC,CAAd;;AACA,UAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AAAE;AAChBtE,QAAAA,KAAK,CAACQ,cAAN,CAAqBG,UAArB,CAAgC6D,MAAhC,CAAuCF,KAAvC,EAA8C,CAA9C,EADc,CACoC;AACnD;AACF,KALD,MAMI;AACFtE,MAAAA,KAAK,CAACQ,cAAN,CAAqBG,UAArB,CAAgC8D,IAAhC,CAAqCL,IAArC;AACD;;AACDpE,IAAAA,KAAK,CAACS,iBAAN,CAAwB,EAAC,GAAGT,KAAK,CAACQ;AAAV,KAAxB;AACD,GAXD;;AAaA,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACK,oBAAC,MAAD;AACG,IAAA,OAAO,EAAEZ,aAAa,CAAC8E,MAD1B;AAEG,kBAAW,cAFd;AAGG,IAAA,QAAQ,EAAEjB,QAHb;AAIG,IAAA,QAAQ,EAAEE,QAJb;AAKG,IAAA,UAAU,EAAER,QALf;AAMG,IAAA,MAAM,EAAEF,MANX;AAOG,uBAAiB;AAPpB,kBASK,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAC,aAAlB;AAAgC,IAAA,KAAK,EAAE,kCAAvC;AAA2E,IAAA,OAAO,EAAE,MAAI;AACtFjD,MAAAA,KAAK,CAACK,kBAAN,CAAyB,KAAzB;AACAiD,MAAAA,aAAa,CAAC,EAAD,CAAb;AACC,KAHH;AAIE,IAAA,aAAa;AAJf,IATL,EAeMP,gBAAgB,GAACA,gBAAgB,CAAC4B,GAAjB,CAAqB,CAACtB,UAAD,EAAYiB,KAAZ,KAAoB;AACzD,wBAAO,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,KAAnB;AAA0B,MAAA,KAAK,EAAEjB,UAAU,EAAEf,IAA7C;AAAmD,MAAA,UAAU,EAAE,CAACe,UAAU,CAAClC,MAA3E;AAAmF,MAAA,OAAO,EAAE,MAAI;AAErGmC,QAAAA,aAAa,CAACD,UAAD,CAAb;AACC;AAHI,MAAP;AAID,GALiB,CAAD,GAKd,EApBR,CADL,EAuBKA,UAAU,EAAEhC,EAAZ,iBACC,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,QAAD;AAAU,kBAAW,2BAArB;AAAiD,IAAA,SAAS;AAA1D,kBACE,oBAAC,YAAD;AAAc,uBAAgB;AAA9B,kBACI,oBAAC,eAAD,qBACE,oBAAC,iBAAD;AACE,IAAA,aAAa,EAAE,cACb,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAC;AAAlB,oBACE;AAAM,MAAA,EAAE,EAAC;AAAT,oBAAyB,0DAAzB,CADF,CADa,eAIb,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,CAArB;AAAwB,MAAA,GAAG,EAAC;AAA5B,oBACE,kCAAOgC,UAAU,EAAEuB,wBAAZ,GAAqCvB,UAAU,EAAEuB,wBAAZ,GAAsC,OAA3E,GAAmF,WAA1F,MADF,CAJa;AADjB,IADF,CADJ,CADF,eAeE,oBAAC,YAAD;AAAc,uBAAgB;AAA9B,kBACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC;AAA3B,kBACE,oBAAC,iBAAD;AACE,IAAA,aAAa,EAAE,cACX,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAC;AAAlB,oBACI;AAAM,MAAA,EAAE,EAAC;AAAT,oBAAyB,mDAAzB,CADJ,CADW,eAIX,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,CAArB;AAAwB,MAAA,GAAG,EAAC;AAA5B,oBACE;AAAO,MAAA,SAAS,EAAC;AAAjB,oBACE,mCACGvB,UAAU,IAAEA,UAAU,EAAE1C,UAAZ,EAAwBgE,GAAxB,CAA4B,CAACP,IAAD,EAAME,KAAN,KAAc;AACnD,0BAAO;AAAI,QAAA,OAAO,EAAE,MAAI;AAACH,UAAAA,WAAW,CAACC,IAAD,CAAX;AAAmB;AAArC,sBACH,gCACKA,IADL,CADG,eAIH,6CACE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,kBAAb;AAAgC,QAAA,IAAI,EAAC,iBAArC;AAAuD,QAAA,OAAO,EAAEpE,KAAK,CAACQ,cAAN,EAAsBG,UAAtB,CAAiC0D,QAAjC,CAA0CD,IAA1C,CAAhE;AAAiH,sBAAW;AAA5H,QADF,CAJG,CAAP;AAQH,KATY,CADf,CADF,CADF,CAJW;AADjB,IADF,CADF,CAfF,CADF,CAxBN,CADJ;AA2EH,CApJC;;AAwJF,MAAMS,SAAwB,GAAI7E,KAAD,IAAW;AACxC,MAAIC,aAAa,GAAG,IAAIpB,mBAAJ,EAApB;AAEA,QAAM,CAACiG,aAAD,EAAeC,gBAAf,IAAmCrG,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAACsG,UAAD,EAAYC,aAAZ,IAA6BvG,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAM,CAACwG,cAAD,EAAgBC,iBAAhB,IAAqCzG,QAAQ,CAAC,KAAD,CAAnD;AACA,QAAM,CAACuE,MAAD,EAAQC,SAAR,IAAqBxE,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAM,CAACyE,QAAD,EAAUC,WAAV,IAAyB1E,QAAQ,CAAM,IAAN,CAAvC;AACA,QAAM,CAAC0G,OAAD,EAASC,UAAT,IAAuB3G,QAAQ,CAAM,EAAN,CAArC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZ2G,IAAAA,iBAAiB;AAClB,GAFQ,EAEP,EAFO,CAAT;AAIA3G,EAAAA,SAAS,CAAC,MAAI;AACVqB,IAAAA,KAAK,CAACO,kBAAN,CAAyBuE,aAAa,IAAE,CAACE,UAAzC;AACH,GAFQ,EAEP,CAACF,aAAD,EAAeE,UAAf,CAFO,CAAT;AAIArG,EAAAA,SAAS,CAAC,MAAI;AACZqB,IAAAA,KAAK,CAACQ,cAAN,CAAqB+E,KAArB,GAA4BT,aAA5B;AACA9E,IAAAA,KAAK,CAACS,iBAAN,CAAwB,EAAC,GAAGT,KAAK,CAACQ;AAAV,KAAxB;AACD,GAHQ,EAGP,CAACsE,aAAD,CAHO,CAAT;;AAKA,QAAMnB,QAAQ,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,aAAnB,KAAqC;AACpD,QAAIA,aAAJ,EAAmBJ,cAAc,GAAjC,KACK,IAAI,CAAC8B,UAAU,CAAC3B,SAAD,CAAX,IAAwBA,SAA5B,EAAsC;AACzC,UAAG/E,aAAa,CAAC+E,SAAD,CAAhB,EAA4B;AAC1BkB,QAAAA,gBAAgB,CAAClB,SAAD,CAAhB;AAED,OAHD,MAII;AACFkB,QAAAA,gBAAgB,CAAClB,SAAD,CAAhB;AACAoB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AACDE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAVI,MAWA;AACHA,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAjC,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACDE,IAAAA,WAAW,CAACS,SAAD,CAAX;AACD,GAlBD;;AAoBA,QAAM2B,UAAU,GAAIC,QAAD,IAAY;AAC7B,QAAIF,KAAJ;AACAH,IAAAA,OAAO,CAACM,OAAR,CAAgBC,IAAI,IAAE;AACpB,UAAGA,IAAI,CAACC,KAAL,KAAaH,QAAhB,EAAyB;AACvBF,QAAAA,KAAK,GAACI,IAAI,CAACE,WAAX;AACD;AACF,KAJD;;AAKA,QAAGN,KAAH,EAAS;AACPR,MAAAA,gBAAgB,CAACQ,KAAD,CAAhB;AACD;;AACD,WAAOA,KAAP;AACD,GAXD;;AAaA,QAAM7B,cAAc,GAAG,MAAM;AAC3BqB,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACA3B,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,IAAAA,SAAS,CAAC,KAAD,CAAT;AACA+B,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAK,IAAAA,iBAAiB;AAClB,GAND;;AAQA,QAAM7B,QAAQ,GAAIqC,IAAD,IAAU;AACzB5C,IAAAA,SAAS,CAAC4C,IAAD,CAAT;AACD,GAFD;;AAKA,MAAKR,iBAAiB,GAAG,OAAOS,YAAY,GAAG,EAAtB,KAA2B;AAClD9F,IAAAA,aAAa,CAAEgE,KAAf,CAA0B,wBAAsBjE,KAAK,CAAC2B,OAA5B,GAAoC,UAA9D,EAAyE;AAACqE,MAAAA,MAAM,EAAC;AAACC,QAAAA,GAAG,EAAC,EAAL;AAAQC,QAAAA,MAAM,EAACH;AAAf;AAAR,KAAzE,EACCnE,IADD,CACOC,QAAD,IAAiC;AACrC,UAAGA,QAAQ,CAACC,MAAT,KAAkB,GAAlB,IAAuBD,QAAQ,CAACqC,IAAnC,EAAwC;AACtC,YAAIiC,OAAY,GAAG,EAAnB;AACAtE,QAAAA,QAAQ,CAACqC,IAAT,CAAckC,OAAd,CAAsBV,OAAtB,CAA+BW,UAAD,IAAc;AAC1CF,UAAAA,OAAO,CAAC1B,IAAR,CAAa;AAACmB,YAAAA,KAAK,EAACU,iBAAiB,CAACD,UAAU,CAACV,IAAZ,CAAxB;AAA0CE,YAAAA,WAAW,EAACQ,UAAU,CAACV,IAAX,CAAgBJ,KAAtE;AAA4ElE,YAAAA,EAAE,EAACgF,UAAU,CAACV,IAAX,CAAgBtE;AAA/F,WAAb;AACD,SAFD;AAGAgE,QAAAA,UAAU,CAACc,OAAD,CAAV,CALsC,CAMtC;AACD;AACF,KAVD,EAUGpE,KAVH,CAUUC,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAVlC;AAWD,GAZD;;AAcA,MAAIsE,iBAAiB,GAAIX,IAAD,IAAU;AAChC,WAAUA,IAAI,CAACY,SAAL,IAAkBZ,IAAI,CAACa,QAAvB,GAAgC,CAACb,IAAI,CAACY,SAAL,IAAgBZ,IAAI,CAACY,SAAL,GAAe,GAAhC,IAAsCZ,IAAI,CAACa,QAA3E,GAAoFb,IAAI,CAACF,QAAL,GAAcE,IAAI,CAACF,QAAnB,GAA4BE,IAAI,CAACJ,KAAL,GAAWI,IAAI,CAACJ,KAAhB,GAAsBI,IAAI,CAACtE,EAAL,GAAQsE,IAAI,CAACtE,EAAb,GAAgB,oBAAhK;AACD,GAFD;;AAMA,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI,+DADJ,eAEI;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEzB,aAAa,CAAC6G,SADzB;AAEE,IAAA,kBAAkB,EAAC,gBAFrB;AAGE,IAAA,QAAQ,EAAEhD,QAHZ;AAIE,IAAA,QAAQ,EAAE,MAAI,CAAE,CAJlB;AAKE,IAAA,OAAO,EAAEC,cALX;AAME,IAAA,UAAU,EAAEP,QANd;AAOE,IAAA,UAAU,EAAC,mCAPb;AAQE,IAAA,cAAc,EAAGyC,KAAD,IAAS;AACvBb,MAAAA,gBAAgB,CAACa,KAAD,CAAhB;AACAX,MAAAA,aAAa,CAAC,CAACnG,aAAa,CAAC8G,KAAD,CAAf,CAAb;AACAT,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA/B,MAAAA,WAAW,CAACwC,KAAD,CAAX;AACA1C,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KAdH;AAeE,IAAA,QAAQ,EAAE,CAACwD,CAAD,EAAGX,YAAH,KAAkB;AAC1BhB,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA,UAAIwB,aAAkB,GAAG,EAAzB;AACArB,MAAAA,iBAAiB,CAACS,YAAD,CAAjB;AACAX,MAAAA,OAAO,CAACM,OAAR,CAAgB,CAACkB,MAAD,EAAStC,KAAT,KACdqC,aAAa,CAAClC,IAAd,eACA,oBAAC,YAAD;AACA,QAAA,UAAU,EAAEmC,MAAM,CAACC,QADnB;AAEA,QAAA,GAAG,EAAEvC,KAFL;AAGA,QAAA,KAAK,EAAEsC,MAAM,CAAChB,KAHd;AAIA,QAAA,OAAO,EAAE,MAAI;AACXb,UAAAA,gBAAgB,CAAC,EAAD,CAAhB;;AACA,cAAG6B,MAAM,CAACf,WAAV,EAAsB;AACpBzC,YAAAA,WAAW,CAACwD,MAAM,CAACf,WAAR,CAAX;AACAd,YAAAA,gBAAgB,CAAC6B,MAAM,CAACf,WAAR,CAAhB;AACD;;AACD3C,UAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AAXD,SAaK0D,MAAM,CAACf,WAAP,IAAsB;AAAEA,QAAAA,WAAW,EAAEe,MAAM,CAACf;AAAtB,OAb3B,EADA,CADF;AAkBA,aAAOc,aAAP;AACD,KAxCH;AAyCE,IAAA,MAAM,EAAE1D,MAzCV;AA0CE,uBAAiB,SA1CnB;AA2CE,IAAA,qBAAqB,EAAE,IA3CzB;AA4CE,IAAA,eAAe,EAAC,eA5ClB;AA6CE,IAAA,WAAW,EAAE;AA7Cf,KA+CCmC,OAAO,CAACT,GAAR,CAAY,CAACiC,MAAD,EAAStC,KAAT,kBACT,oBAAC,YAAD;AACA,IAAA,UAAU,EAAEsC,MAAM,CAACC,QADnB;AAEA,IAAA,GAAG,EAAEvC,KAFL;AAGA,IAAA,KAAK,EAAEsC,MAAM,CAAChB,KAHd;AAIA,IAAA,OAAO,EAAE,MAAI;AACXb,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;;AACA,UAAG6B,MAAM,CAACf,WAAV,EAAsB;AACpBzC,QAAAA,WAAW,CAACwD,MAAM,CAACf,WAAR,CAAX;AACAd,QAAAA,gBAAgB,CAAC6B,MAAM,CAACf,WAAR,CAAhB;AACD;;AACD3C,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AAXD,KAYK0D,MAAM,CAACf,WAAP,IAAsB;AAAEA,IAAAA,WAAW,EAAEe,MAAM,CAACf;AAAtB,GAZ3B,EADH,CA/CD,CADF,EAiEGb,UAAU,IAAEE,cAAZ,gBAA2B,oBAAC,SAAD,qBAC1B,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,KAAK,EAAE,CAACJ,aAAD,GAAe,mBAAf,GAAmC,eAAlE;AAAmF,iBAAU,QAA7F;AAAsG,IAAA,QAAQ;AAA9G,IAD0B,CAA3B,GAEY,IAnEf,CAFJ,CADJ;AA2EH,CApKD;;AAwKA,MAAMgC,aAA4B,GAAI9G,KAAD,IAAW;AAC9C,QAAM,CAACe,WAAD,EAAaC,cAAb,IAA+BtC,QAAQ,CAAC,KAAD,CAA7C;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZqC,IAAAA,cAAc,CAAC,CAAC,CAAChB,KAAK,CAACa,gBAAT,CAAd;AACD,GAFQ,EAEP,CAACb,KAAK,CAACa,gBAAP,CAFO,CAAT;AAIA,sBACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEpB,YAAY,CAACsH,KADxB;AAEE,IAAA,KAAK,EAAE,iBAAiB/G,KAAK,CAACa,gBAAN,KAAyB,SAAzB,GAAmC,uBAAnC,GAA2D,sCAA5E,CAFT;AAGE,IAAA,MAAM,EAAEE,WAHV;AAIE,IAAA,OAAO,EAAE,MAAI;AAACf,MAAAA,KAAK,CAACgH,KAAN;AAAc,KAJ9B;AAKE,IAAA,OAAO,EAAE,cAAU,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,SAAZ;AAAsB,MAAA,OAAO,EAAC,SAA9B;AAAwC,MAAA,OAAO,EAAE,MAAI;AAAChH,QAAAA,KAAK,CAACgH,KAAN;AAAc;AAApE,YAAV;AALX,kBAQC,yCARD,CADF;AAWD,CAjBD;;AAoBA,MAAMC,OAAsB,GAAIjH,KAAD,IAAW;AACxC,QAAM,CAACe,WAAD,EAAaC,cAAb,IAA+BtC,QAAQ,CAAC,KAAD,CAA7C;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZqC,IAAAA,cAAc,CAAChB,KAAK,CAACmB,MAAP,CAAd;AACD,GAFQ,EAEP,CAACnB,KAAK,CAACmB,MAAP,CAFO,CAAT;AAIA,sBACE,oBAAC,KAAD;AACA,IAAA,OAAO,EAAE1B,YAAY,CAACyH,KADtB;AAEA,IAAA,KAAK,EAAC,OAFN;AAGA,IAAA,MAAM,EAAEnG,WAHR;AAIA,IAAA,MAAM,EAAC,EAJP;AAKA,IAAA,SAAS,EAAE,KALX;AAMA,IAAA,aAAa,EAAE,MAAI,CAAE,CANrB;AAOA,uBAAgB,2BAPhB;AAQA,wBAAiB,iCARjB;AASA,IAAA,MAAM,EAAC;AATP,kBAWA;AAAK,IAAA,QAAQ,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAC,6BAArB;AAAmD,IAAA,SAAS,EAAC;AAA7D,kBACE,oBAAC,OAAD;AAAS,IAAA,KAAK,MAAd;AAAe,IAAA,QAAQ,EAAC,OAAxB;AAAgC,kBAAW;AAA3C,IADF,CAXA,CADF;AAiBD,CAvBD","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef, createRef} from 'react';\r\n// @ts-ignore\r\nimport { HttpResponse, GroupsServiceClient } from '../../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { ConfirmationModal } from '../Modal';\r\nimport { SearchInput } from './SearchInput';\r\nimport {CheckIcon } from '@patternfly/react-icons';\r\n//import { TableComposable, Caption, Thead, Tr, Th, Tbody, Td } from '\r\nimport {ValidateEmail} from '../../js/utils.js'\r\nimport { Alert, Button, Checkbox, DataList, DataListCell, DataListItem, DataListItemCells, DataListItemRow, FormAlert, Modal, ModalVariant, Select, SelectOption, SelectVariant, Spinner, TextInput, Wizard, WizardStep } from '@patternfly/react-core';\r\n\r\n\r\n\r\n\r\nexport const InviteMemberModal: React.FC<any> = (props) => {\r\n\r\n\r\n    let groupsService = new GroupsServiceClient();\r\n    const [stepIdReached, setStepIdReached] = React.useState(1);\r\n    const [isStep1Complete,setIsStep1Complete] = useState(false);\r\n    const [isStep2Complete,setIsStep2Complete] = useState(false);\r\n    const [invitationData,setInvitationData] = useState({\r\n      groupEnrollmentConfiguration: {},\r\n      groupRoles: [],\r\n      withoutAcceptance:true\r\n    });\r\n    const [invitationResult,setInvitationResult] = useState<any>(\"\");\r\n    const [isModalOpen,setIsModalOpen] = useState(false);\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    useEffect(()=>{\r\n      setIsModalOpen(props.active)\r\n    },[props.active])\r\n\r\n    const onNext = ({ id }: WizardStep) => {\r\n      if (id) {\r\n        if (typeof id === 'string') {\r\n          const [, orderIndex] = id.split('-');\r\n          id = parseInt(orderIndex);\r\n        }\r\n\r\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\r\n        \r\n      }\r\n    };\r\n\r\n    const sendInvitation = ()=>{\r\n      setLoading(true);\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/members/invitation\",{...invitationData})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          setInvitationResult('success');\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n        else{\r\n          setInvitationResult('error');\r\n        }\r\n        setLoading(false);\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n  \r\n    const closeWizard = () => {\r\n      // eslint-disable-next-line no-console\r\n      props.setActive(false);\r\n    };\r\n  \r\n  \r\n   \r\n\r\n\r\n    const steps = [\r\n        { \r\n            id: 'incrementallyEnabled-1', \r\n            name: 'Select Group Enrollment Configuration',\r\n            component: <EnrollmentStep groupId={props.groupId} invitationData={invitationData} setInvitationData={setInvitationData} isStep1Complete={isStep1Complete} setIsStep1Complete={setIsStep1Complete}/>, \r\n            enableNext: isStep1Complete\r\n        },\r\n        {\r\n          id: 'incrementallyEnabled-2',\r\n          name: 'Recipient Details',\r\n          component: <EmailStep groupId={props.groupId} invitationData={invitationData} setInvitationData={setInvitationData} isStep2Complete={isStep2Complete} setIsStep2Complete={setIsStep2Complete}/>,\r\n          enableNext: isStep2Complete,\r\n          nextButtonText: 'Send Invitation',\r\n          canJumpTo: stepIdReached >= 2\r\n        }\r\n      ];\r\n  \r\n      const title = 'Invite Group Member';\r\n  \r\n  \r\n\r\n  \r\n    return (\r\n      <React.Fragment>\r\n         <Modal\r\n            variant={ModalVariant.medium}\r\n            title={\"Invite Group Member\"}\r\n            isOpen={isModalOpen}\r\n            onClose={()=>{\r\n              props.setActive(false);}}\r\n            actions={[]}\r\n            onEscapePress={()=>{\r\n              if(!(loading&&!invitationResult)){\r\n                props.setActive(false);\r\n              }\r\n            }}\r\n            >\r\n            <ResponseModal invitationResult={invitationResult}  close={()=>{closeWizard(); setInvitationResult(\"\");}}/>\r\n            <Loading active={loading&&!invitationResult}/>\r\n            <Wizard\r\n                navAriaLabel={`${title} steps`}\r\n                mainAriaLabel={`${title} content`}\r\n                onClose={closeWizard}\r\n                steps={steps}\r\n                onNext={onNext}\r\n                height={400}\r\n                onSave={sendInvitation}\r\n            />\r\n        </Modal>\r\n\r\n\r\n\r\n        \r\n        \r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n\r\n  const EnrollmentStep: React.FC<any> = (props) => {\r\n    let groupsService = new GroupsServiceClient();\r\n    const toggleRef= useRef<any>(null);\r\n    const [groupEnrollments,setGroupEnrollments] = useState<any>([]);\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [selected,setSelected] = useState('');\r\n    const [enrollment,setEnrollment] = useState<any>({});\r\n\r\n    useEffect(()=>{\r\n      fetchGroupEnrollments();\r\n    },[]);\r\n\r\n    useEffect(()=>{      \r\n      props.setIsStep1Complete(props.invitationData.groupEnrollmentConfiguration?.id&&props.invitationData.groupRoles.length>0)\r\n    },[props.invitationData]);\r\n\r\n\r\n    useEffect(()=>{\r\n      if(enrollment.id){\r\n        props.invitationData.groupEnrollmentConfiguration = {id:enrollment.id};\r\n        props.invitationData.groupRoles= [];\r\n      }\r\n      else{\r\n        props.invitationData.groupEnrollmentConfiguration = {};\r\n        props.invitationData.groupRoles= [];\r\n      }\r\n      props.setInvitationData({...props.invitationData});\r\n    },[enrollment])\r\n\r\n\r\n    const onToggle = isOpen => {\r\n        setIsOpen(isOpen);\r\n      };\r\n\r\n     const clearSelection = () => {\r\n        setSelected(\"\");\r\n        setIsOpen(false);\r\n      };\r\n\r\n    \r\n    \r\n\r\n    const onSelect = (event, selection, isPlaceholder) => {\r\n        if (isPlaceholder) clearSelection();\r\n        else {\r\n            setSelected(selection);\r\n            setIsOpen(false);  \r\n            toggleRef.current.focus();\r\n        }\r\n      };\r\n\r\n    let fetchGroupEnrollments = ()=>{\r\n        groupsService!.doGet<any>(\"/group-admin/group/\"+props.groupId+\"/configuration/all\")\r\n        .then((response: HttpResponse<any>) => {\r\n          if(response.status===200&&response.data){\r\n            setGroupEnrollments(response.data);\r\n          }\r\n        })\r\n      }\r\n\r\n    let roleHandler = (role)=>{\r\n      if(props.invitationData.groupRoles.includes(role)){\r\n        const index = props.invitationData.groupRoles.indexOf(role);\r\n        if (index > -1) { // only splice array when item is found\r\n          props.invitationData.groupRoles.splice(index, 1); // 2nd parameter means remove one item only\r\n        }\r\n      }\r\n      else{\r\n        props.invitationData.groupRoles.push(role);\r\n      }\r\n      props.setInvitationData({...props.invitationData});\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <Select\r\n                variant={SelectVariant.single}\r\n                aria-label=\"Select Input\"\r\n                onToggle={onToggle}\r\n                onSelect={onSelect}\r\n                selections={selected}\r\n                isOpen={isOpen}\r\n                aria-labelledby={\"Test\"}\r\n                >\r\n                  <SelectOption key=\"placeholder\" value={\"Select Enrollement Configuration\"} onClick={()=>{\r\n                    props.setIsStep1Complete(false);\r\n                    setEnrollment({});\r\n                    }} \r\n                    isPlaceholder\r\n                  />\r\n                  {groupEnrollments?groupEnrollments.map((enrollment,index)=>{\r\n                    return <SelectOption key={index} value={enrollment?.name} isDisabled={!enrollment.active} onClick={()=>{\r\n                      \r\n                      setEnrollment(enrollment)\r\n                      }} />\r\n                  }):[]}\r\n            </Select>\r\n            {enrollment?.id&&\r\n              <React.Fragment>\r\n                <DataList aria-label=\"Compact data list example\" isCompact>\r\n                  <DataListItem aria-labelledby=\"compact-item1\">\r\n                      <DataListItemRow>\r\n                        <DataListItemCells\r\n                          dataListCells={[\r\n                            <DataListCell key=\"primary content\">\r\n                              <span id=\"compact-item1\"><strong>Membership Duration</strong></span>\r\n                            </DataListCell>,\r\n                            <DataListCell width={3} key=\"secondary content \">\r\n                              <span>{enrollment?.membershipExpirationDays?enrollment?.membershipExpirationDays +\" Days\":\"Permanent\"} </span>  \r\n                            </DataListCell>\r\n                          ]}\r\n                        />\r\n                      </DataListItemRow>\r\n                  </DataListItem>\r\n                  <DataListItem aria-labelledby=\"compact-item2\">\r\n                    <DataListItemRow className=\"gm_role_row\">\r\n                      <DataListItemCells\r\n                        dataListCells={[\r\n                            <DataListCell key=\"primary content\">\r\n                                <span id=\"compact-item1\"><strong>Select Roles</strong></span>\r\n                            </DataListCell>,\r\n                            <DataListCell width={3} key=\"roles\">\r\n                              <table className=\"gm_roles-table\">\r\n                                <tbody>\r\n                                  {enrollment&&enrollment?.groupRoles?.map((role,index)=>{\r\n                                      return <tr onClick={()=>{roleHandler(role);}}>\r\n                                          <td>\r\n                                              {role}\r\n                                          </td>\r\n                                          <td>\r\n                                            <Checkbox id=\"standalone-check\" name=\"standlone-check\" checked={props.invitationData?.groupRoles.includes(role)} aria-label=\"Standalone input\" />\r\n                                          </td>   \r\n                                      </tr>                    \r\n                                  })}\r\n                                </tbody>\r\n                              </table>\r\n                            </DataListCell>\r\n                          ]}\r\n                      />\r\n                    </DataListItemRow>\r\n                  </DataListItem>                  \r\n              </DataList>\r\n              </React.Fragment>  \r\n            }\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst EmailStep: React.FC<any> = (props) => {\r\n    let groupsService = new GroupsServiceClient();\r\n\r\n    const [inviteAddress,setInviteAddress] = useState(\"\")\r\n    const [emailError,setEmailError] = useState(true);\r\n    const [showEmailError,setShowEmailError] = useState(false);\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [selected,setSelected] = useState<any>(null);\r\n    const [options,setOptions] = useState<any>([])\r\n\r\n    useEffect(()=>{\r\n      fetchGroupMembers();\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        props.setIsStep2Complete(inviteAddress&&!emailError);\r\n    },[inviteAddress,emailError])\r\n\r\n    useEffect(()=>{\r\n      props.invitationData.email= inviteAddress;\r\n      props.setInvitationData({...props.invitationData});\r\n    },[inviteAddress])\r\n\r\n    const onSelect = (event, selection, isPlaceholder) => {\r\n      if (isPlaceholder) clearSelection();\r\n      else if (!selectUser(selection)&&selection){\r\n        if(ValidateEmail(selection)){\r\n          setInviteAddress(selection);\r\n          \r\n        }\r\n        else{\r\n          setInviteAddress(selection);\r\n          setEmailError(true);\r\n        }\r\n        setShowEmailError(true);\r\n      }\r\n      else {\r\n        setShowEmailError(false);\r\n        setIsOpen(false);\r\n      }\r\n      setSelected(selection);\r\n    };\r\n\r\n    const selectUser = (username)=>{\r\n      let email;\r\n      options.forEach(user=>{\r\n        if(user.value===username){\r\n          email=user.description;\r\n        }\r\n      })\r\n      if(email){\r\n        setInviteAddress(email);\r\n      }\r\n      return email;\r\n    }\r\n    \r\n    const clearSelection = () => {\r\n      setInviteAddress(\"\");\r\n      setSelected(null);\r\n      setIsOpen(false);\r\n      setEmailError(false);\r\n      fetchGroupMembers();\r\n    };\r\n\r\n    const onToggle = (open) => {\r\n      setIsOpen(open);\r\n    };\r\n\r\n\r\n    let  fetchGroupMembers = async (searchString = \"\")=>{\r\n      groupsService!.doGet<any>(\"/group-admin/group/\"+props.groupId+\"/members\",{params:{max:20,search:searchString}})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200&&response.data){\r\n          let members: any = [];\r\n          response.data.results.forEach((membership)=>{\r\n            members.push({value:getUserIdentifier(membership.user),description:membership.user.email,id:membership.user.id});\r\n          })\r\n          setOptions(members);\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    let getUserIdentifier = (user) => {\r\n      return   (user.firstName || user.lastName?(user.firstName&&user.firstName+\" \")+ user.lastName:user.username?user.username:user.email?user.email:user.id?user.id:\"Info Not Available\")\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <strong>Enter Recipient Address:</strong>\r\n            <div className=\"gm_invitation-email-input\">\r\n              <Select\r\n                variant={SelectVariant.typeahead}\r\n                typeAheadAriaLabel=\"Select a state\"\r\n                onToggle={onToggle}\r\n                onSelect={()=>{}}\r\n                onClear={clearSelection}\r\n                selections={selected}\r\n                createText=\"Send invite to this email address\"\r\n                onCreateOption={(value)=>{\r\n                  setInviteAddress(value)\r\n                  setEmailError(!ValidateEmail(value));\r\n                  setShowEmailError(true)\r\n                  setSelected(value);\r\n                  setIsOpen(false);\r\n                }}\r\n                onFilter={(e,searchString)=>{\r\n                  setInviteAddress(\"\");\r\n                  setEmailError(false);\r\n                  setShowEmailError(false);\r\n                  let filterOptions :any = []\r\n                  fetchGroupMembers(searchString);\r\n                  options.forEach((option, index) => (\r\n                    filterOptions.push(\r\n                    <SelectOption\r\n                    isDisabled={option.disabled}\r\n                    key={index}\r\n                    value={option.value}\r\n                    onClick={()=>{\r\n                      setInviteAddress(\"\");\r\n                      if(option.description){\r\n                        setSelected(option.description);\r\n                        setInviteAddress(option.description);\r\n                      }\r\n                      setIsOpen(false);\r\n                    }}\r\n\r\n                    {...(option.description && { description: option.description })}\r\n                    />)\r\n                  ))\r\n                  return filterOptions;\r\n                }}\r\n                isOpen={isOpen}\r\n                aria-labelledby={\"titleId\"}\r\n                isInputValuePersisted={true}\r\n                placeholderText=\"Select a user\"\r\n                isCreatable={true}\r\n              >\r\n              {options.map((option, index) => (\r\n                  <SelectOption\r\n                  isDisabled={option.disabled}\r\n                  key={index}\r\n                  value={option.value}\r\n                  onClick={()=>{\r\n                    setInviteAddress(\"\");\r\n                    if(option.description){\r\n                      setSelected(option.description);\r\n                      setInviteAddress(option.description);\r\n                    }\r\n                    setIsOpen(false);\r\n                  }}\r\n                  {...(option.description && { description: option.description })}\r\n                  />\r\n              ))}\r\n              </Select>\r\n              {emailError&&showEmailError?<FormAlert>\r\n                <Alert variant=\"danger\" title={!inviteAddress?\"Email is required\":\"Invalid Email\"} aria-live=\"polite\" isInline />\r\n              </FormAlert>:null}\r\n              </div>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ResponseModal: React.FC<any> = (props) => {\r\n  const [isModalOpen,setIsModalOpen] = useState(false);\r\n  useEffect(()=>{    \r\n    setIsModalOpen(!!props.invitationResult)\r\n  },[props.invitationResult])\r\n\r\n  return(\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title={\"Invitation \" + (props.invitationResult==='success'?\"was successfully sent\":\" could not be sent, please try again\")}\r\n      isOpen={isModalOpen}\r\n      onClose={()=>{props.close()}}\r\n      actions={[         <Button key=\"confirm\" variant=\"primary\" onClick={()=>{props.close()}}>\r\n      OK\r\n    </Button>]}\r\n    ><></></Modal>\r\n  )\r\n}\r\n\r\n\r\nconst Loading: React.FC<any> = (props) => {\r\n  const [isModalOpen,setIsModalOpen] = useState(false);\r\n  useEffect(()=>{    \r\n    setIsModalOpen(props.active)\r\n  },[props.active])\r\n\r\n  return(\r\n    <Modal\r\n    variant={ModalVariant.large}\r\n    width=\"19rem\"\r\n    isOpen={isModalOpen}\r\n    header=\"\"\r\n    showClose={false}\r\n    onEscapePress={()=>{}}\r\n    aria-labelledby=\"modal-custom-header-label\"\r\n    aria-describedby=\"modal-custom-header-description\"\r\n    footer=\"\"\r\n  >\r\n    <div tabIndex={0} id=\"modal-no-header-description\" className=\"gm_loader-modal-container\">\r\n      <Spinner isSVG diameter=\"100px\" aria-label=\"Contents of the custom size example\" />\r\n    </div>\r\n  </Modal>\r\n  )\r\n}"],"file":"InviteMemberModal.js"}