{"version":3,"sources":["../../src/app/groups-mngnt-service/groups.service.ts"],"names":["KeycloakService","ContentAlert","keycloakService","keycloak","GroupsServiceError","Error","constructor","response","statusText","GroupsServiceClient","kcSvc","groupsUrl","authServerUrl","realm","baseUrl","doGet","endpoint","config","doRequest","method","doDelete","doPost","body","JSON","stringify","doPut","fetch","makeUrl","toString","makeConfig","data","json","e","ok","handleError","status","authenticated","audiencePresent","window","location","href","login","err","danger","startsWith","URL","url","target","hasOwnProperty","params","Object","keys","forEach","key","searchParams","append","Promise","resolve","getToken","then","token","headers","Authorization","catch","addEventListener","event","promise","error","preventDefault"],"mappings":"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","sourcesContent":["\r\n\r\n// @ts-ignore\r\nimport { KeycloakClient, KeycloakService } from '../keycloak-service/keycloak.service';\r\n// @ts-ignore\r\nimport { ContentAlert } from '../content/ContentAlert';\r\n\r\n\r\ndeclare const keycloak: KeycloakClient;\r\nconst keycloakService = new KeycloakService(keycloak);\r\n\r\ndeclare const baseUrl: string;\r\n\r\ntype ConfigResolve = (config: RequestInit) => void;\r\n\r\nexport interface HttpResponse<T = {}> extends Response {\r\n    data?: T;\r\n}\r\n\r\nexport interface RequestInitWithParams extends RequestInit {\r\n    params?: {[name: string]: string | number};\r\n    target?: any; \r\n}\r\n\r\nexport class GroupsServiceError extends Error {\r\n    constructor(public response: HttpResponse) {\r\n        super(response.statusText);\r\n    }\r\n}\r\n\r\n\r\nexport class GroupsServiceClient {\r\n    private kcSvc: KeycloakService;\r\n    private groupsUrl: string;\r\n    private baseUrl: string;\r\n    //TODO: UPDATE the groupsUrl value in the constructor to match the base path of the extension's REST endpoints!!!\r\n    public constructor() {\r\n        this.kcSvc = keycloakService;\r\n        this.groupsUrl = this.kcSvc.authServerUrl() + 'realms/' + this.kcSvc.realm() + '/agm/account';\r\n        this.baseUrl = this.kcSvc.authServerUrl() + 'admin/' + this.kcSvc.realm() + '/console'\r\n    }\r\n\r\n    public async doGet<T>(endpoint: string,\r\n                          config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, method: 'get'});\r\n    }\r\n\r\n    public async doDelete<T>(endpoint: string,\r\n                            config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, method: 'delete'});\r\n    }\r\n\r\n    public async doPost<T>(endpoint: string,\r\n                          body: string | {},\r\n                          config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, body: JSON.stringify(body), method: 'post'});\r\n    }\r\n\r\n    public async doPut<T>(endpoint: string,\r\n                         body: string | {},\r\n                         config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, body: JSON.stringify(body), method: 'put'});\r\n    }\r\n\r\n    public async doRequest<T>(endpoint: string,\r\n                              config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n\r\n        const response: HttpResponse<T> = await fetch(this.makeUrl(endpoint, config).toString(),\r\n                                                      await this.makeConfig(config));\r\n\r\n        try {\r\n            response.data = await response.json();\r\n        } catch (e) {} // ignore.  Might be empty\r\n\r\n        if (!response.ok) {\r\n            this.handleError(response);\r\n            throw new GroupsServiceError(response);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private handleError(response: HttpResponse): void {\r\n        if (response !== null && response.status === 401) {\r\n            if (this.kcSvc.authenticated() && !this.kcSvc.audiencePresent()) {\r\n                // authenticated and the audience is not present => not allowed\r\n                window.location.href = baseUrl + '#/forbidden';\r\n            } else {\r\n                // session timed out?\r\n                this.kcSvc.login();\r\n            }\r\n        }\r\n\r\n        if (response !== null && response.status === 403) {\r\n            window.location.href = baseUrl + '#/forbidden';\r\n        }\r\n\r\n        if (response !== null && response.data != null) {\r\n            if (response.data['errors'] != null) {\r\n                for(let err of response.data['errors'])\r\n                    ContentAlert.danger(err['errorMessage'], err['params']);\r\n            } else {\r\n                ContentAlert.danger(\r\n                `${response.statusText}: ${response.data['errorMessage'] ? response.data['errorMessage'] : ''} ${response.data['error'] ? response.data['error'] : ''}`);\r\n            };\r\n        } else {\r\n            ContentAlert.danger(response.statusText);\r\n        }\r\n    }\r\n\r\n    private makeUrl(endpoint: string, config?: RequestInitWithParams): URL {\r\n        if (endpoint.startsWith('http')) return new URL(endpoint);\r\n        const url = new URL((config?.target==='base'?this.baseUrl:this.groupsUrl) + endpoint);\r\n        // add request params\r\n        if (config && config.hasOwnProperty('params')) {\r\n            const params: {[name: string]: string} = config.params as {} || {};\r\n            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    private makeConfig(config: RequestInit = {}): Promise<RequestInit> {\r\n        return new Promise( (resolve: ConfigResolve) => {\r\n            this.kcSvc.getToken()\r\n                .then( (token: string) => {\r\n                    resolve( {\r\n                        ...config,\r\n                        headers: {'Content-Type': 'application/json',\r\n                                 ...config.headers,\r\n                                  Authorization: 'Bearer ' + token}\r\n                    });\r\n                }).catch(() => {\r\n                    this.kcSvc.login();\r\n                });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"unhandledrejection\", (event: PromiseRejectionEvent) => {\r\n    event.promise.catch(error => {\r\n        if (error instanceof GroupsServiceError) {\r\n            // We already handled the error. Ignore unhandled rejection.\r\n            event.preventDefault();\r\n        }\r\n    });\r\n});\r\n"],"file":"groups.service.js"}