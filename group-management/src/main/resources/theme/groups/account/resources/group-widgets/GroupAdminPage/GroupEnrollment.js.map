{"version":3,"sources":["../../../src/app/group-widgets/GroupAdminPage/GroupEnrollment.tsx"],"names":["React","useState","useEffect","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","GroupsServiceClient","ConfirmationModal","ExternalLinkAltIcon","GroupEnrollment","props","modalInfo","setModalInfo","groupEnrollments","setGroupEnrollments","groupsService","fetchGroupEnrollments","doGet","groupId","then","response","status","data","noGroupEnrollments","length","map","enrollment","index","name","active","aup","url"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef} from 'react';\r\nimport {  DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell, Button, Tooltip, DataListAction, Pagination, InputGroup, TextInput, Dropdown, BadgeToggle, DropdownItem, Badge, Modal, Checkbox} from '@patternfly/react-core';\r\n// @ts-ignore\r\nimport { HttpResponse, GroupsServiceClient } from '../../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { ConfirmationModal } from '../Modal';\r\nimport { SearchInput } from './SearchInput';\r\nimport {ExternalLinkAltIcon } from '@patternfly/react-icons';\r\n//import { TableComposable, Caption, Thead, Tr, Th, Tbody, Td } from '\r\n\r\ninterface FederatedIdentity {\r\n    identityProvider: string;\r\n}\r\n\r\ninterface User {\r\n    id?: string;\r\n    username: string;\r\n    emailVerified: boolean;\r\n    email: string;\r\n    federatedIdentities: FederatedIdentity[];\r\n    firstName: string;\r\n    lastName: string;\r\n    attributes: any;\r\n}\r\n\r\ninterface Memberships {\r\n    id?: string;\r\n    user: User;\r\n    status: string;\r\n    membershipExpiresAt: string;\r\n    groupRoles: string[];\r\n  }\r\n\r\n\r\n\r\nexport const GroupEnrollment: FC<any> = (props) => {\r\n    const [modalInfo,setModalInfo] = useState({});\r\n    const [groupEnrollments,setGroupEnrollments] = useState<any>([]);\r\n\r\n\r\n\r\n    let groupsService = new GroupsServiceClient();\r\n    useEffect(()=>{\r\n      fetchGroupEnrollments();\r\n    },[])\r\n\r\n    let fetchGroupEnrollments = ()=>{\r\n      groupsService!.doGet<any>(\"/group-admin/group/\"+props.groupId+\"/configuration/all\")\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200&&response.data){\r\n          setGroupEnrollments(response.data);\r\n        }\r\n      })\r\n    }\r\n\r\n    const noGroupEnrollments= ()=>{\r\n        return (\r\n          <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n            <DataListItemRow key='emptyRow'>\r\n              <DataListItemCells dataListCells={[\r\n                <DataListCell key='empty'><strong>No group enrollments found</strong></DataListCell>\r\n              ]} />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n        )\r\n      }\r\n    \r\n  \r\n\r\n  \r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <ConfirmationModal modalInfo={modalInfo}/>\r\n        <DataList aria-label=\"Group Member Datalist\" isCompact>\r\n            <DataListItem aria-labelledby=\"compact-item1\">\r\n              <DataListItemRow>\r\n                <DataListItemCells dataListCells={[\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"id-hd\">\r\n                    <strong>Name</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"username-hd\">\r\n                    <strong>Status</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell className=\"gm_vertical_center_cell\" width={3} key=\"email-hd\">\r\n                    <strong>Aup</strong>\r\n                  </DataListCell>,\r\n                ]}>\r\n                </DataListItemCells>\r\n              </DataListItemRow>\r\n            </DataListItem>\r\n            {groupEnrollments.length>0?groupEnrollments.map((enrollment,index)=>{\r\n              return <DataListItem aria-labelledby={\"enrollment-\"+index}>\r\n                <DataListItemRow>\r\n                  <DataListItemCells\r\n                    dataListCells={[\r\n                      <DataListCell width={3} key=\"primary content\">\r\n                        {enrollment.name||\"Not Available\"}\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} className={enrollment.active?\"gm_group-enrollment-active\":\"gm_group-enrollment-inactive\"} key=\"secondary content \">\r\n                        <strong>{enrollment.active?\"Active\":\"Inactive\"}</strong>\r\n                      </DataListCell>,\r\n                      <DataListCell width={3} key=\"secondary content \">\r\n                        {enrollment?.aup?.url?<a href={enrollment?.aup?.url} target=\"_blank\" rel=\"noreferrer\">link <ExternalLinkAltIcon/> </a>:\"Not Available\"}\r\n                      </DataListCell>,                    \r\n                    ]}\r\n                  />\r\n                  \r\n                </DataListItemRow>\r\n              </DataListItem>\r\n            }):noGroupEnrollments()}\r\n          </DataList>\r\n               \r\n        </React.Fragment>         \r\n   \r\n    )\r\n  }\r\n\r\n"],"file":"GroupEnrollment.js"}