{"version":3,"sources":["../../src/app/group-widgets/GroupAdmins.tsx"],"names":["React","useState","useEffect","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","Button","Tooltip","DataListAction","SelectVariant","Checkbox","Select","SelectOption","FormAlert","Alert","GroupsServiceClient","ConfirmationModal","ValidateEmail","GroupAdmins","props","titleId","groupsService","isOpen","setIsOpen","selected","setSelected","options","setOptions","emailError","setEmailError","inviteAddress","setInviteAddress","selectedUserId","setSelectedUserId","modalInfo","setModalInfo","successMessage","setSuccessMessage","fetchGroupMembers","noAdmins","disapearingMessage","message","setTimeout","onSelect","event","selection","isPlaceholder","clearSelection","selectUser","username","userId","forEach","user","value","id","makeAdmin","doPost","groupId","then","response","status","fetchGroupConfiguration","catch","err","console","log","removeAdmin","doDelete","sendInvitation","email","searchString","doGet","params","max","search","data","members","results","membership","push","description","onToggle","open","groupConfiguration","admins","length","map","admin","index","direct","title","accept_message","cancel_message","accept","cancel","typeahead","e","filterOptions","option","disabled"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef} from 'react';\r\nimport {  DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell, Button, Tooltip, DataListAction, SelectVariant, Checkbox,Select,SelectOption, FormAlert, Alert} from '@patternfly/react-core';\r\n// @ts-ignore\r\nimport { HttpResponse, GroupsServiceClient } from '../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { ConfirmationModal } from './Modal';\r\nimport {ValidateEmail} from '../js/utils.js'\r\n\r\nexport const GroupAdmins: FC<any> = (props) => {\r\n\r\n    const titleId = 'typeahead-select-id-1';\r\n\r\n    let groupsService = new GroupsServiceClient();\r\n    const [isOpen,setIsOpen] = useState<boolean>(false);\r\n    const [selected,setSelected] = useState<any>(null);\r\n    const [options,setOptions] = useState<any>([]);\r\n    const [emailError,setEmailError] = useState<boolean>(false);\r\n    const [inviteAddress,setInviteAddress] = useState<string>(\"\");\r\n    const [selectedUserId,setSelectedUserId] = useState<string>(\"\");\r\n    const [modalInfo,setModalInfo] = useState({});\r\n    const [successMessage,setSuccessMessage] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n      fetchGroupMembers()\r\n    },[]);\r\n\r\n\r\n \r\n\r\n    const noAdmins= ()=>{\r\n        return (\r\n          <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n            <DataListItemRow key='emptyRow'>\r\n              <DataListItemCells dataListCells={[\r\n                <DataListCell key='empty'><strong>This group has no admins</strong></DataListCell>\r\n              ]} />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n        )\r\n      }\r\n\r\n    const disapearingMessage = (message) => {\r\n      setSuccessMessage(message);\r\n      setTimeout(() => {\r\n        setSuccessMessage(\"\");\r\n      }, 2000);\r\n      \r\n    }\r\n\r\n    const onSelect = (event, selection, isPlaceholder) => {\r\n      setInviteAddress(\"\");\r\n      if (isPlaceholder) clearSelection();\r\n      else if (!selectUser(selection)&&selection){\r\n        if(ValidateEmail(selection)){\r\n          setInviteAddress(selection)\r\n        }\r\n        else{\r\n          setInviteAddress(\"\");\r\n          setEmailError(true);\r\n        }\r\n      }\r\n      else {\r\n          setIsOpen(false);\r\n      }\r\n      setSelected(selection);\r\n    };\r\n    \r\n    const selectUser = (username)=>{\r\n      let userId;\r\n      options.forEach(user=>{\r\n        if(user.value===username){\r\n          userId=user.id;\r\n        }\r\n      })\r\n      setSelectedUserId(userId);\r\n\r\n      return userId;\r\n    }\r\n    \r\n    const makeAdmin = (userId) =>{\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/admin/\"+userId,{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          props.fetchGroupConfiguration();\r\n          disapearingMessage(\"Admin Succesfully Added.\")\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    } \r\n\r\n    const removeAdmin = (userId) => {\r\n      groupsService!.doDelete<any>(\"/group-admin/group/\"+props.groupId+\"/admin/\"+userId,{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          props.fetchGroupConfiguration();\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    const sendInvitation = (email) => {\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/admin/invite\",{\"email\":email})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          disapearingMessage(\"Invitation was succesfully sent to the email address.\")\r\n          props.fetchGroupConfiguration();\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    let  fetchGroupMembers = async (searchString = \"\")=>{\r\n      groupsService!.doGet<any>(\"/group-admin/group/\"+props.groupId+\"/members\",{params:{max:20,search:searchString}})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200&&response.data){\r\n          let members: any = [];\r\n          response.data.results.forEach((membership)=>{\r\n            members.push({value:membership.user.username,description:membership.user.email,id:membership.user.id});\r\n          })\r\n          setOptions(members);\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    const clearSelection = () => {\r\n\r\n        setSelected(null);\r\n        setIsOpen(false);\r\n        setOptions([]);\r\n    };\r\n\r\n    const onToggle = (open) => {\r\n      setIsOpen(open);\r\n      };\r\n\r\n\r\n\r\n    \r\n\r\n\r\n  \r\n\r\n  \r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <ConfirmationModal modalInfo={modalInfo}/>\r\n        <DataList aria-label=\"Group Member Datalist\" isCompact>\r\n            <DataListItem aria-labelledby=\"compact-item1\">\r\n              <DataListItemRow>\r\n                <DataListItemCells dataListCells={[\r\n                  <DataListCell width={1} key=\"id-hd\">\r\n                    <strong>Id</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"username-hd\">\r\n                    <strong>Username</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"email-hd\">\r\n                  <strong>Email</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"email-hd\">\r\n                  <strong>Direct Admin</strong>\r\n                  </DataListCell> \r\n                ]}>\r\n                </DataListItemCells>\r\n                <DataListAction\r\n                      className=\"gm_cell-center\"\r\n                      aria-labelledby=\"check-action-item1 check-action-action2\"\r\n                      id=\"check-action-action1\"\r\n                      aria-label=\"Actions\"\r\n                      isPlainButtonAction\r\n                    ><div className=\"gm_cell-placeholder\"></div></DataListAction>\r\n              </DataListItemRow>\r\n            </DataListItem>\r\n            {props.groupConfiguration?.admins?.length>0?props.groupConfiguration.admins.map((admin,index)=>{\r\n              return <DataListItem aria-labelledby={\"member-\"+index}>\r\n                <DataListItemRow>\r\n                  <DataListItemCells\r\n                    dataListCells={[\r\n                      <DataListCell width={1} key=\"primary content\">\r\n                        {admin.user.id}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        {admin.user.username}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        {admin.user.email}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        <Tooltip content={<div>{admin.direct?\"This user is a direct admin in this group\":\"This user is not a direct admin in this group\"}</div>}>\r\n                            <Checkbox id=\"disabled-check-1\" className=\"gm_direct-checkbox\" defaultChecked={admin.direct?true:false} isDisabled />\r\n                        </Tooltip>\r\n                      </DataListCell>\r\n                    ]}\r\n                  />\r\n                  {admin.direct?\r\n                    <DataListAction\r\n                            className=\"gm_cell-center\"\r\n                            aria-labelledby=\"check-action-item1 check-action-action1\"\r\n                            id=\"check-action-action1\"\r\n                            aria-label=\"Actions\"\r\n                            isPlainButtonAction\r\n                    >\r\n                        <Tooltip\r\n                        content={\r\n                            <div>\r\n                            {admin.user.id===props.user.userId?\"Revoke Admin Rights for this group\":\"Revoke Admin Rights for this group\"}\r\n                            </div>\r\n                        }\r\n                        >\r\n                            <Button variant=\"danger\" className={\"gm_x-button-small\"} onClick={()=>{\r\n                                setModalInfo({\r\n                                  title:\"Confirmation\",\r\n                                  accept_message: \"YES\",\r\n                                  cancel_message: \"NO\",\r\n                                  message: (\"Are you sure you want to remove this user as an admin to this group.\"),\r\n                                  accept: function(){\r\n                                    removeAdmin(admin.user.id);\r\n                                    setModalInfo({})},\r\n                                  cancel: function(){\r\n                                    setModalInfo({})}\r\n                                });                                \r\n                            }}>\r\n                                <div className={\"gm_x-button\"}></div>\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </DataListAction>\r\n                  :\"\"}\r\n                </DataListItemRow>\r\n              </DataListItem>\r\n            }):noAdmins()}\r\n          </DataList> \r\n          <div className=\"gm_add-admin-container\">\r\n            <h1>Add New Group Admin</h1>\r\n            <p>Use the input to search for a user to add as a group admin, or type a valid email address to send an invitation.</p>\r\n\r\n            <div className=\"gm_add-admin-input\">\r\n              <div>\r\n              <Select\r\n                variant={SelectVariant.typeahead}\r\n                typeAheadAriaLabel=\"Select a state\"\r\n                onToggle={onToggle}\r\n                onSelect={onSelect}\r\n                onClear={clearSelection}\r\n                selections={selected}\r\n                createText=\"Invite with email\"\r\n                onCreateOption={(value)=>{\r\n                  if(ValidateEmail(value)){\r\n                    setInviteAddress(value)\r\n                  }\r\n                  else{\r\n                    setInviteAddress(\"\");\r\n                    setEmailError(true);\r\n                  }\r\n\r\n                }}\r\n                onFilter={(e,searchString)=>{\r\n                  setInviteAddress(\"\");\r\n                  setSelectedUserId(\"\");\r\n                  setEmailError(false);\r\n                  let filterOptions :any = []\r\n                  fetchGroupMembers(searchString);\r\n                  options.forEach((option, index) => (\r\n                    filterOptions.push(\r\n                    <SelectOption\r\n                    isDisabled={option.disabled}\r\n                    key={index}\r\n                    value={option.value}\r\n                    {...(option.description && { description: option.description })}\r\n                    />)\r\n                  ))\r\n                  return filterOptions;\r\n                }}\r\n                isOpen={isOpen}\r\n                aria-labelledby={titleId}\r\n                isInputValuePersisted={true}\r\n                placeholderText=\"Select a user\"\r\n                isCreatable={true}\r\n              >\r\n              {options.map((option, index) => (\r\n                  <SelectOption\r\n                  isDisabled={option.disabled}\r\n                  key={index}\r\n                  value={option.value}\r\n                  {...(option.description && { description: option.description })}\r\n                  />\r\n              ))}\r\n              </Select>\r\n              {successMessage?<FormAlert>\r\n                <Alert variant=\"success\" title={successMessage} aria-live=\"polite\" isInline />\r\n              </FormAlert>:null}\r\n              {emailError?<FormAlert>\r\n                <Alert variant=\"danger\" title=\"Invalid Email\" aria-live=\"polite\" isInline />\r\n              </FormAlert>:null}\r\n              </div>\r\n              <Tooltip content={<div>{selectedUserId?\"Add selected user as an admin to this group.\":emailError?\"To send an invitation please provide a valid email address.\":inviteAddress?\"Send invitation to become a group admin.\":\"Select a user or provide a valid a valid email address to add/invite a user to become a group admin.\"}</div>}>\r\n                <Button isDisabled={!(selectedUserId||(!emailError&&inviteAddress))}  className={\"gm_admin-button \"+(inviteAddress||emailError?\"gm_invitation-button\":\"gm_add-admin-button\")} onClick={()=>{\r\n                    if(selectedUserId){\r\n                      setModalInfo({\r\n                        title:\"Confirmation\",\r\n                        accept_message: \"YES\",\r\n                        cancel_message: \"NO\",\r\n                        message: (\"Are you sure you want to add this user (\"+  selected +\") as an admin to this group.\"),\r\n                        accept: function(){\r\n                          makeAdmin(selectedUserId);\r\n                          setModalInfo({})},\r\n                        cancel: function(){\r\n                          setModalInfo({})}\r\n                      });\r\n                    }\r\n                    if(inviteAddress){\r\n                      setModalInfo({\r\n                        title:\"Confirmation\",\r\n                        accept_message: \"YES\",\r\n                        cancel_message: \"NO\",\r\n                        message: (\"Are you sure you want to send an invitation to this address (\"+  selected +\").\"),\r\n                        accept: function(){\r\n                          sendInvitation(inviteAddress);\r\n                          setModalInfo({})},\r\n                        cancel: function(){\r\n                          setModalInfo({})}\r\n                      });\r\n                      \r\n                    }\r\n                  }}>\r\n                    <div></div>\r\n                </Button>\r\n              </Tooltip>\r\n            </div>  \r\n            \r\n\r\n          </div>\r\n        </React.Fragment>         \r\n   \r\n    )\r\n}\r\n"],"file":"GroupAdmins.js"}