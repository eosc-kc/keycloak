{"version":3,"sources":["../../src/app/content/ContentPages.tsx"],"names":[],"mappingssourcesContent":["/* \r\n *  Copyright 2019 Red Hat, Inc. and/or its affiliates.\r\n * \r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n * \r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n * \r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n * /\r\n\r\n/* \r\n* import *  as React from 'react';\r\n* import {Route, Switch,matchPath} from 'react-router-dom';\r\n* import {NavItem, NavExpandable} from '@patternfly/react-core';\r\n* // @ts-ignore\r\n* import {Msg} from './widgets/Msg';\r\n* // @ts-ignore\r\n* import {PageNotFound} from './content/page-not-found/PageNotFound';\r\n* // @ts-ignore\r\n* import { ForbiddenPage } from './content/forbidden-page/ForbiddenPage';\r\n* import {GroupPage} from './group-management-pages/GroupPage';\r\n* \r\n* export interface ContentItem {\r\n*     id?: string;\r\n*     label: string;\r\n*     labelParams?: string[];\r\n*     hidden?: string;\r\n*     groupId: string; // computed value\r\n*     itemId: string; // computed value\r\n* };\r\n* \r\n* let customPages =[\r\n*     {\r\n*         path: \"/group-managment/showgroups/:id\",\r\n*         expandId: \"group-management\",\r\n*         parentId: \"showgroups\",\r\n*         componentName: \"GroupPage\"\r\n*     }\r\n* ]\r\n* \r\n* export interface Expansion extends ContentItem {\r\n*     content: ContentItem[];\r\n* }\r\n* \r\n* export interface PageDef extends ContentItem {\r\n*     path: string;\r\n* }\r\n* \r\n* export interface ComponentPageDef extends PageDef {\r\n*     component: React.ComponentType;\r\n* }\r\n* \r\n* export interface ModulePageDef extends PageDef {\r\n*     modulePath: string;\r\n*     componentName: string;\r\n*     module: React.Component; // computed value\r\n* }\r\n* \r\n* export function isModulePageDef(item: ContentItem): item is ModulePageDef {\r\n*     return (item as ModulePageDef).modulePath !== undefined;\r\n* }\r\n* \r\n* export function isExpansion(contentItem: ContentItem): contentItem is Expansion {\r\n*     return (contentItem as Expansion).content !== undefined;\r\n* }\r\n* \r\n* declare const content: ContentItem[];\r\n* \r\n* function groupId(group: number): string {\r\n*     return 'grp-' + group;\r\n* }\r\n* \r\n* function itemId(group: number, item: number): string {\r\n*     return 'grp-' + group + '_itm-' + item;\r\n* }\r\n* \r\n* function isChildOf(parent: Expansion, child: PageDef): boolean {\r\n*     for (var item of parent.content) {\r\n*         if (isExpansion(item) && isChildOf(item, child)) return true;\r\n*         if (parent.groupId === child.groupId) return true;\r\n*     }\r\n* \r\n*     return false;\r\n* }\r\n* \r\n* function createNavItems(activePage: PageDef, contentParam: ContentItem[], groupNum: number): React.ReactNode {\r\n*     if (typeof content === 'undefined') return (<React.Fragment/>);\r\n*         let current_path = window.location.hash.substring(1);\r\n*         let customPage = {\r\n*             path:\"\",\r\n*             parentId:\"\",\r\n*             expandId:\"\",\r\n*             componentName:\"\"\r\n*         }\r\n*         customPages.forEach(page=>{\r\n*             matchPath(current_path, {\r\n*                 path: page.path,\r\n*                 exact: true,\r\n*                 strict: false\r\n*               })&&(customPage=page)&&(activePage={path:\"\",label:\"\",groupId:\"\",itemId:\"\"});\r\n*         })\r\n* \r\n*         const links: React.ReactElement[] = contentParam.map((item: ContentItem) => {\r\n*             console.log(item);\r\n*             const navLinkId = `nav-link-${item.id}`;\r\n*             if (isExpansion(item)) {\r\n*                 return <NavExpandable id={navLinkId}\r\n*                                         groupId={item.groupId}\r\n*                                         key={item.groupId}\r\n*                                         title={Msg.localize(item.label, item.labelParams)}\r\n*                                         isExpanded={isChildOf(item, activePage)||customPage.expandId===item.id}\r\n*                                         >\r\n*                             {createNavItems(activePage, item.content, groupNum + 1)}\r\n*                         </NavExpandable>\r\n*             } else {\r\n*                 const page: PageDef = item as PageDef;\r\n*                 return <NavItem id={navLinkId}\r\n*                                 groupId={item.groupId}\r\n*                                 itemId={item.itemId}\r\n*                                 key={item.itemId}\r\n*                                 to={'* /' + page.path}\r\n*                                 isActive={activePage.itemId === item.itemId||customPage.parentId===item.id}\r\n*                                 type=\"button\">\r\n*                             {Msg.localize(page.label, page.labelParams)}\r\n*                         </NavItem>\r\n*             }\r\n*     });\r\n* \r\n*     return (<React.Fragment>{links}</React.Fragment>);\r\n* }\r\n* \r\n* export function makeNavItems(activePage: PageDef): React.ReactNode {\r\n*     return createNavItems(activePage, content, 0);\r\n* }\r\n* \r\n* function setIds(contentParam: ContentItem[], groupNum: number): number {\r\n*     if (typeof contentParam === 'undefined') return groupNum;\r\n*     let expansionGroupNum = groupNum;\r\n* \r\n*     for (let i = 0; i < contentParam.length; i++) {\r\n*         const item: ContentItem = contentParam[i];\r\n*         if (isExpansion(item)) {\r\n*             item.itemId = itemId(groupNum, i);\r\n*             expansionGroupNum = expansionGroupNum + 1;\r\n*             item.groupId = groupId(expansionGroupNum);\r\n*             expansionGroupNum = setIds(item.content, expansionGroupNum);\r\n*             console.log('currentGroup=' + (expansionGroupNum));\r\n*         } else {\r\n*             item.groupId = groupId(groupNum);\r\n*             item.itemId = itemId(groupNum, i);\r\n*         }\r\n*     };\r\n* \r\n*     return expansionGroupNum;\r\n* }\r\n* \r\n* export function initGroupAndItemIds(): void {\r\n*     setIds(content, 0);\r\n*     console.log({content});\r\n* }\r\n* \r\n* // get rid of Expansions and put all PageDef items into a single array\r\n* export function flattenContent(pageDefs: ContentItem[]): PageDef[] {\r\n*     const flat: PageDef[] = [];\r\n* \r\n*     for (let item of pageDefs) {\r\n*         if (isExpansion(item)) {\r\n*             flat.push(...flattenContent(item.content));\r\n*         } else {\r\n*             flat.push(item as PageDef);\r\n*         }\r\n*     }\r\n* \r\n*     return flat;\r\n* }\r\n* \r\n* export function makeRoutes(): React.ReactNode {\r\n*     if (typeof content === 'undefined') return (<span/>);\r\n*     const customComponents = {\r\n*         GroupPage:GroupPage\r\n*     }\r\n*     const pageDefs: PageDef[] = flattenContent(content);\r\n* \r\n*     const routes: React.ReactElement<Route>[] = pageDefs.map((page: PageDef) => {\r\n*         if (isModulePageDef(page)) {\r\n*             const node: React.ReactNode = React.createElement(page.module[page.componentName], {'pageDef': page});\r\n*             return <Route key={page.itemId} path={'/' + page.path} exact render={() => node} />;\r\n*         } else {\r\n*             const pageDef: ComponentPageDef = page as ComponentPageDef;\r\n*             return <Route key={page.itemId} path={'/' + page.path} exact component={pageDef.component}/>;\r\n*         }\r\n*     });\r\n* \r\n*     return (<Switch>\r\n*                 {routes}\r\n*                 {customPages.map((item,index)=>{\r\n*                     return <Route path={item.path} component={customComponents[item.componentName]}/>\r\n*                 })}\r\n*                 <Route path=\"/group-managment/showgroups/:id\" component={GroupPage}/>\r\n*                 <Route path=\"/forbidden\" component={ForbiddenPage}/>\r\n*                 <Route component={PageNotFound}/>\r\n*             </Switch>);\r\n* }\r\n*/"],"file":"ContentPages.js"}