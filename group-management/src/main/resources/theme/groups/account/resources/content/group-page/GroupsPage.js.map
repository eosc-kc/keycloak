{"version":3,"sources":["../../../src/app/content/group-page/GroupsPage.tsx"],"names":["React","Link","useState","useEffect","LongArrowAltDownIcon","LongArrowAltUpIcon","AngleDownIcon","DataList","DataListItem","DataListItemRow","DataListCell","DataListItemCells","Pagination","Badge","ContentPage","GroupsServiceClient","Msg","GroupsPage","props","groupsService","page","setPage","perPage","setPerPage","groups","setGroups","totalItems","setTotalItems","orderBy","setOrderBy","asc","setAsc","fetchGroups","onSetPage","_event","newPage","onPerPageSelect","newPerPage","doGet","params","first","max","order","then","response","console","log","data","count","results","emptyGroup","renderGroupList","membership","appIndex","group","id","name","groupRoles","map","role","index","aupExpiresAt","membershipExpiresAt","orderResults","type","localize","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {FC,useState,useEffect} from 'react';\r\nimport {LongArrowAltDownIcon,LongArrowAltUpIcon,AngleDownIcon } from '@patternfly/react-icons';\r\n\r\n\r\nimport {\r\n  Checkbox,\r\n  DataList,\r\n  DataListItem,\r\n  DataListItemRow,\r\n  DataListCell,\r\n  DataListItemCells,\r\n  Pagination,\r\n  Tooltip,\r\n  Badge,\r\n} from '@patternfly/react-core';\r\n\r\n// @ts-ignore\r\nimport { ContentPage } from '../ContentPage';\r\nimport { HttpResponse, GroupsServiceClient } from '../../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { Msg } from '../../widgets/Msg';\r\n\r\nexport interface GroupsPageProps {\r\n}\r\n\r\nexport interface GroupsPageState {\r\n  groups: Group[];\r\n  directGroups: Group[];\r\n  isDirectMembership: boolean;\r\n}\r\n\r\ninterface Group {\r\n  id?: string;\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\ninterface Response {\r\n  results:Group[];\r\n  count: BigInteger;\r\n}\r\nexport const GroupsPage: FC<GroupsPageProps> = (props) => {\r\n\r\n  let groupsService = new GroupsServiceClient();\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [groups,setGroups] = useState([]as Group[]);\r\n  const [totalItems,setTotalItems] = useState<number>(0);\r\n  const [orderBy,setOrderBy] = useState<string>('');\r\n  const [asc,setAsc] = useState<boolean>(true);\r\n\r\n  useEffect(()=>{\r\n    fetchGroups();\r\n  },[]);\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    fetchGroups();\r\n  },[perPage,page,orderBy,asc]);\r\n\r\n  const onSetPage = (_event: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const onPerPageSelect = (\r\n    _event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\r\n    newPerPage: number,\r\n    newPage: number\r\n  ) => {\r\n    setPerPage(newPerPage);\r\n    setPage(newPage);\r\n  };\r\n\r\n\r\n\r\n\r\n  const fetchGroups = () =>  {\r\n    groupsService!.doGet<Response>(\"/user/groups\",{params:{first:(perPage*(page-1)),max:perPage,...(orderBy?{order:orderBy}:{}),asc:asc?\"true\":\"false\"}})\r\n      .then((response: HttpResponse<Response>) => {\r\n        console.log(response.data);\r\n        let count = response?.data?.count||0;\r\n        setTotalItems(count as number);\r\n        setGroups(response?.data?.results||[] as Group[]);\r\n      });\r\n  }\r\n\r\n  \r\n  const emptyGroup= ()=> {\r\n\r\n    return (\r\n      <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n        <DataListItemRow key='emptyRow'>\r\n          <DataListItemCells dataListCells={[\r\n            <DataListCell key='empty'><strong><Msg msgKey='noGroupsText' /></strong></DataListCell>\r\n          ]} />\r\n        </DataListItemRow>\r\n      </DataListItem>\r\n    )\r\n  }\r\n\r\n  const renderGroupList = (membership, appIndex: number) => {\r\n    return (\r\n      <Link to={\"/groups/showgroups/\"+membership.group.id}>        \r\n        <DataListItem id={`${appIndex}-group`} key={'group-' + appIndex} aria-labelledby=\"groups-list\" >\r\n          <DataListItemRow>\r\n            <DataListItemCells\r\n              dataListCells={[\r\n                <DataListCell id={`${appIndex}-group-name`} width={2} key={'name-' + appIndex}>\r\n                  {membership.group.name} \r\n                </DataListCell>,\r\n                <DataListCell id={`${appIndex}-group-roles`} width={2} key={'directMembership-' + appIndex}>\r\n                  {membership.groupRoles.map((role,index)=>{\r\n                        return <Badge key={index} className=\"gm_role_badge\" isRead>{role}</Badge>\r\n                      })}\r\n                </DataListCell>,\r\n                <DataListCell id={`${appIndex}-group-aupExpiration`} width={2} key={'directMembership-' + appIndex}>\r\n                  {membership.aupExpiresAt||\"Never\"} \r\n                </DataListCell>,\r\n                <DataListCell id={`${appIndex}-group-membershipExpiration`} width={2} key={'directMembership-' + appIndex}>\r\n                {membership.membershipExpiresAt||\"Never\"}\r\n              </DataListCell>\r\n              ]}\r\n            />\r\n          </DataListItemRow>\r\n        </DataListItem>\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  const orderResults = (type) => {\r\n    if(orderBy!==type){\r\n      setOrderBy(type); setAsc(true);\r\n    }\r\n    else if(asc){\r\n      setAsc(false);\r\n    }\r\n    else{\r\n      setAsc(true);\r\n    }\r\n  }\r\n  \r\n  \r\n    return (\r\n      <ContentPage title={Msg.localize('groupLabel')}>\r\n        <DataList id=\"groups-list\" aria-label={Msg.localize('groupLabel')} isCompact>\r\n          <DataListItem id=\"groups-list-header\" aria-labelledby=\"Columns names\">\r\n            <DataListItemRow className=\"gm_view-groups-header\">\r\n              <DataListItemCells\r\n                dataListCells={[\r\n                  <DataListCell key='group-name-header' width={2} onClick={()=>{orderResults('')}}>\r\n                    <strong><Msg msgKey='Name' /></strong>{!orderBy?<AngleDownIcon/>:asc?<LongArrowAltDownIcon />:<LongArrowAltUpIcon/>}\r\n                  </DataListCell>,\r\n                  <DataListCell key='group-roles' width={2}>\r\n                    <strong>Roles</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell key='group-aup-expiration-header' width={2} onClick={()=>{orderResults('aupExpiresAt')}}>\r\n                    <strong>Aup Expiration Date</strong> {orderBy!=='aupExpiresAt'?<AngleDownIcon/>:asc?<LongArrowAltDownIcon/>:<LongArrowAltUpIcon/>}\r\n                  </DataListCell>,\r\n                  <DataListCell key='group-membership-expiration-header' width={2} onClick={()=>{orderResults('membershipExpiresAt')}}>\r\n                  <strong>Membership Expiration Date</strong> {orderBy!=='membershipExpiresAt'?<AngleDownIcon/>:asc?<LongArrowAltDownIcon/>:<LongArrowAltUpIcon/>}\r\n                </DataListCell>,\r\n                ]}\r\n              />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n          {groups.length === 0\r\n            ? emptyGroup()\r\n            : groups.map((group: Group, appIndex: number) =>\r\n              renderGroupList(group, appIndex))}\r\n        </DataList>\r\n        <Pagination\r\n            itemCount={totalItems}\r\n            perPage={perPage}\r\n            page={page}\r\n            onSetPage={onSetPage}\r\n            widgetId=\"top-example\"\r\n            onPerPageSelect={onPerPageSelect}\r\n          />\r\n      </ContentPage>\r\n    );\r\n  \r\n};\r\n"],"file":"GroupsPage.js"}