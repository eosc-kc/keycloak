{"version":3,"sources":["../../src/app/group-widgets/Modal.tsx"],"names":["React","Modal","ModalVariant","Button","useEffect","ConfirmationModal","props","setIsModalOpen","Object","keys","modalInfo","length","isModalOpen","useState","handleModalToggle","cancel","small","title","accept","accept_message","cancel_message","message"],"mappings":"AAAA,OAAO,KAAKA,KAAZ;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,MAA9B;AACA,SAAQC,SAAR,wD,CACA;;AAKC;AAGD,OAAO,MAAMC,iBAAmD,GAAIC,KAAD,IAAU;AAEzEF,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,SAAlB,EAA6BC,MAA7B,GAAsC,CAAvC,CAAd;AACH,GAFQ,EAEP,CAACL,KAAK,CAACI,SAAP,CAFO,CAAT;AAIA,QAAM,CAACE,WAAD,EAAcL,cAAd,IAAgCP,KAAK,CAACa,QAAN,CAAe,KAAf,CAAtC;;AAEA,QAAMC,iBAAiB,GAAG,MAAM;AAC5BR,IAAAA,KAAK,EAAEI,SAAP,EAAkBK,MAAlB;AACH,GAFD;;AAIA,sBACI,oBAAC,KAAD,CAAO,QAAP,qBACI,oBAAC,KAAD;AACA,IAAA,OAAO,EAAEb,YAAY,CAACc,KADtB;AAEA,IAAA,KAAK,EAAEV,KAAK,EAAEI,SAAP,EAAkBO,KAFzB;AAGA,IAAA,MAAM,EAAEL,WAHR;AAIA,IAAA,OAAO,EAAEE,iBAJT;AAKA,IAAA,OAAO,EAAE,cACL,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,SAAZ;AAAsB,MAAA,OAAO,EAAC,SAA9B;AAAwC,MAAA,OAAO,EAAE,MAAI;AAACR,QAAAA,KAAK,EAAEI,SAAP,EAAkBQ,MAAlB;AAA2B;AAAjF,OACKZ,KAAK,EAAEI,SAAP,EAAkBS,cADvB,CADK,EAILb,KAAK,EAAEI,SAAP,EAAkBU,cAAlB,iBACI,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAC,MAA7B;AAAoC,MAAA,OAAO,EAAE,MAAI;AAACd,QAAAA,KAAK,EAAEI,SAAP,EAAkBK,MAAlB;AAA4B;AAA9E,OACKT,KAAK,EAAEI,SAAP,EAAkBU,cADvB,CALC;AALT,KAgBKd,KAAK,EAAEI,SAAP,EAAkBW,OAAlB,IAA2Bf,KAAK,EAAEI,SAAP,EAAkBW,OAhBlD,CADJ,CADJ;AAqBH,CAjCM","sourcesContent":["import * as React from 'react';\r\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\r\nimport {useEffect} from 'react';\r\n// import parse from '../../node_modules/react-html-parser';\r\n\r\n\r\ninterface ConfirmationModalProps {\r\n    modalInfo: any;\r\n};\r\n\r\n\r\nexport const ConfirmationModal: React.FC<ConfirmationModalProps> = (props) =>{\r\n    \r\n    useEffect(()=>{\r\n        setIsModalOpen(Object.keys(props.modalInfo).length > 0);\r\n    },[props.modalInfo])\r\n\r\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n\r\n    const handleModalToggle = () => {\r\n        props?.modalInfo?.cancel();\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Modal\r\n            variant={ModalVariant.small}\r\n            title={props?.modalInfo?.title}\r\n            isOpen={isModalOpen}\r\n            onClose={handleModalToggle}\r\n            actions={[\r\n                <Button key=\"confirm\" variant=\"primary\" onClick={()=>{props?.modalInfo?.accept()}}>\r\n                    {props?.modalInfo?.accept_message}\r\n                </Button>,\r\n                props?.modalInfo?.cancel_message&&\r\n                    <Button key=\"cancel\" variant=\"link\" onClick={()=>{props?.modalInfo?.cancel();}}>\r\n                        {props?.modalInfo?.cancel_message}\r\n                    </Button>\r\n                \r\n            ]}\r\n            >\r\n                {props?.modalInfo?.message&&props?.modalInfo?.message}\r\n            </Modal>\r\n        </React.Fragment>   );\r\n}\r\n\r\n\r\n"],"file":"Modal.js"}