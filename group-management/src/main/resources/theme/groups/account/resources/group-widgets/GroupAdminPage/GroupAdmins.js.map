{"version":3,"sources":["../../../src/app/group-widgets/GroupAdminPage/GroupAdmins.tsx"],"names":["React","useState","useEffect","DataList","DataListItem","DataListItemCells","DataListItemRow","DataListCell","Button","Tooltip","DataListAction","SelectVariant","Checkbox","Select","SelectOption","FormAlert","Alert","GroupsServiceClient","ConfirmationModal","ValidateEmail","Loading","GroupAdmins","props","titleId","groupsService","isOpen","setIsOpen","selected","setSelected","options","setOptions","emailError","setEmailError","inviteAddress","setInviteAddress","selectedUserId","setSelectedUserId","modalInfo","setModalInfo","successMessage","setSuccessMessage","loading","setLoading","groupIds","setGroupIds","groupAdminIds","setGroupAdminIds","fetchGroupAdminIds","console","log","length","fetchGroupMembers","groupadminids","groupConfiguration","admins","map","admin","push","user","id","noAdmins","disapearingMessage","message","setTimeout","makeAdmin","userId","doPost","groupId","then","response","status","fetchGroupConfiguration","catch","err","removeAdmin","doDelete","sendInvitation","email","doGet","data","searchString","params","max","search","groups","join","members","results","forEach","membership","value","getUserIdentifier","description","disabled","includes","firstName","lastName","username","clearSelection","onToggle","open","index","direct","title","accept_message","cancel_message","accept","cancel","typeahead","e","filterOptions","option"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {FC,useState,useEffect,useRef} from 'react';\r\nimport {  DataList,DataListItem,DataListItemCells,DataListItemRow,DataListCell, Button, Tooltip, DataListAction, SelectVariant, Checkbox,Select,SelectOption, FormAlert, Alert} from '@patternfly/react-core';\r\n// @ts-ignore\r\nimport { HttpResponse, GroupsServiceClient } from '../../groups-mngnt-service/groups.service';\r\n// @ts-ignore\r\nimport { ConfirmationModal } from '../Modal';\r\nimport {ValidateEmail} from '../../js/utils.js'\r\nimport { Loading } from '../LoadingModal';\r\n\r\nexport const GroupAdmins: FC<any> = (props) => {\r\n\r\n    const titleId = 'typeahead-select-id-1';\r\n\r\n    let groupsService = new GroupsServiceClient();\r\n    const [isOpen,setIsOpen] = useState<boolean>(false);\r\n    const [selected,setSelected] = useState<any>(null);\r\n    const [options,setOptions] = useState<any>([]);\r\n    const [emailError,setEmailError] = useState<boolean>(false);\r\n    const [inviteAddress,setInviteAddress] = useState<string>(\"\");\r\n    const [selectedUserId,setSelectedUserId] = useState<string>(\"\");\r\n    const [modalInfo,setModalInfo] = useState({});\r\n    const [successMessage,setSuccessMessage] = useState(\"\");\r\n    const [loading,setLoading] = useState(false);\r\n    const [groupIds,setGroupIds] = useState([]);\r\n    const [groupAdminIds,setGroupAdminIds] = useState<any>([]);\r\n\r\n    useEffect(()=>{\r\n      //fetchGroupMembers();\r\n      fetchGroupAdminIds();\r\n      console.log('this 1')\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n      \r\n      if(groupIds.length>0){\r\n        fetchGroupMembers();\r\n      }\r\n    },[groupIds])\r\n\r\n    useEffect(()=>{\r\n      let groupadminids = [] as any;\r\n      \r\n      props.groupConfiguration?.admins?.length>0&&props.groupConfiguration?.admins.map((admin)=> {\r\n        groupadminids.push(admin.user.id);\r\n        // groupadminids.push(admin.user.id);\r\n        })\r\n      setGroupAdminIds(groupadminids);      \r\n    },[props.groupConfiguration]);\r\n\r\n \r\n\r\n    const noAdmins= ()=>{\r\n        return (\r\n          <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n            <DataListItemRow key='emptyRow'>\r\n              <DataListItemCells dataListCells={[\r\n                <DataListCell key='empty'><strong>This group has no admins</strong></DataListCell>\r\n              ]} />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n        )\r\n      }\r\n\r\n    const disapearingMessage = (message) => {\r\n      setSuccessMessage(message);\r\n      setTimeout(() => {\r\n        setSuccessMessage(\"\");\r\n      }, 2000);\r\n      \r\n    }\r\n\r\n    \r\n    const makeAdmin = (userId) =>{\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/admin/\"+userId,{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          props.fetchGroupConfiguration();\r\n          disapearingMessage(\"Admin Succesfully Added.\")\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    } \r\n\r\n    const removeAdmin = (userId) => {\r\n      groupsService!.doDelete<any>(\"/group-admin/group/\"+props.groupId+\"/admin/\"+userId,{})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200||response.status===204){\r\n          props.fetchGroupConfiguration();\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    const sendInvitation = (email) => {\r\n      setLoading(true);\r\n      groupsService!.doPost<any>(\"/group-admin/group/\"+props.groupId+\"/admin/invite\",{\"email\":email})\r\n      .then((response: HttpResponse<any>) => {\r\n        setLoading(false);\r\n        if(response.status===200||response.status===204){\r\n          disapearingMessage(\"Invitation was succesfully sent to the email address.\")\r\n          props.fetchGroupConfiguration();\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{\r\n        setLoading(false);\r\n        console.log(err)})\r\n    }\r\n\r\n    let fetchGroupAdminIds = () => {\r\n        groupsService!.doGet<any>(\"/group-admin/groupids/all\")\r\n        .then((response: HttpResponse<any>) => {\r\n          if(response.status===200&&response.data){\r\n            setGroupIds(response.data)\r\n            // setGroupMembers(response.data.results);\r\n          }\r\n        }).catch((err)=>{console.log(err)})\r\n      \r\n    } \r\n\r\n\r\n    let  fetchGroupMembers = async (searchString = \"\")=>{\r\n      groupsService!.doGet<any>(\"/group-admin/groups/members\",{params:{max:20,search:searchString,groups:groupIds.join(',')}})\r\n      .then((response: HttpResponse<any>) => {\r\n        if(response.status===200&&response.data){\r\n          let members: any = [];\r\n\r\n          response.data.results.forEach((membership)=>{\r\n            members.push({value:getUserIdentifier(membership),description:membership.email,id:membership.id,disabled:groupAdminIds.includes(membership.id)});\r\n          })\r\n          setOptions(members);\r\n          // setGroupMembers(response.data.results);\r\n        }\r\n      }).catch((err)=>{console.log(err)})\r\n    }\r\n\r\n    let getUserIdentifier = (user) => {\r\n      return   (user.firstName || user.lastName?(user.firstName&&user.firstName+\" \")+ user.lastName:user.username?user.username:user.email?user.email:user.id?user.id:\"Info Not Available\")\r\n    }\r\n\r\n    const clearSelection = () => {\r\n        setInviteAddress(\"\");\r\n        setSelected(null);\r\n        setIsOpen(false);\r\n        setEmailError(false);\r\n        fetchGroupMembers();\r\n    };\r\n\r\n    const onToggle = (open) => {\r\n      setIsOpen(open);\r\n      };\r\n\r\n\r\n\r\n    \r\n\r\n\r\n  \r\n\r\n  \r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <Loading active={loading}/>\r\n        <ConfirmationModal modalInfo={modalInfo}/>\r\n        <DataList aria-label=\"Group Member Datalist\" isCompact>\r\n            <DataListItem aria-labelledby=\"compact-item1\">\r\n              <DataListItemRow>\r\n                <DataListItemCells dataListCells={[\r\n                  <DataListCell width={1} key=\"id-hd\">\r\n                    <strong>Id</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"username-hd\">\r\n                    <strong>Username</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"email-hd\">\r\n                  <strong>Email</strong>\r\n                  </DataListCell>,\r\n                  <DataListCell width={1} key=\"email-hd\">\r\n                  <strong>Direct Admin</strong>\r\n                  </DataListCell> \r\n                ]}>\r\n                </DataListItemCells>\r\n                <DataListAction\r\n                      className=\"gm_cell-center\"\r\n                      aria-labelledby=\"check-action-item1 check-action-action2\"\r\n                      id=\"check-action-action1\"\r\n                      aria-label=\"Actions\"\r\n                      isPlainButtonAction\r\n                    ><div className=\"gm_cell-placeholder\"></div></DataListAction>\r\n              </DataListItemRow>\r\n            </DataListItem>\r\n            {props.groupConfiguration?.admins?.length>0?props.groupConfiguration.admins.map((admin,index)=>{\r\n              return <DataListItem aria-labelledby={\"member-\"+index}>\r\n                <DataListItemRow>\r\n                  <DataListItemCells\r\n                    dataListCells={[\r\n                      <DataListCell width={1} key=\"primary content\">\r\n                        {admin.user.id}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        {admin.user.username}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        {admin.user.email}\r\n                      </DataListCell>,\r\n                      <DataListCell width={1} key=\"secondary content \">\r\n                        <Tooltip content={<div>{admin.direct?\"This user is a direct admin in this group\":\"This user is not a direct admin in this group\"}</div>}>\r\n                            <Checkbox id=\"disabled-check-1\" className=\"gm_direct-checkbox\" defaultChecked={admin.direct?true:false} isDisabled />\r\n                        </Tooltip>\r\n                      </DataListCell>\r\n                    ]}\r\n                  />\r\n                  {admin.direct?\r\n                    <DataListAction\r\n                            className=\"gm_cell-center\"\r\n                            aria-labelledby=\"check-action-item1 check-action-action1\"\r\n                            id=\"check-action-action1\"\r\n                            aria-label=\"Actions\"\r\n                            isPlainButtonAction\r\n                    >\r\n                        <Tooltip\r\n                        content={\r\n                            <div>\r\n                            {admin.user.id===props.user.userId?\"Revoke Admin Rights for this group\":\"Revoke Admin Rights for this group\"}\r\n                            </div>\r\n                        }\r\n                        >\r\n                            <Button variant=\"danger\" className={\"gm_x-button-small\"} onClick={()=>{\r\n                                setModalInfo({\r\n                                  title:\"Confirmation\",\r\n                                  accept_message: \"YES\",\r\n                                  cancel_message: \"NO\",\r\n                                  message: (\"Are you sure you want to remove this user as an admin to this group.\"),\r\n                                  accept: function(){\r\n                                    removeAdmin(admin.user.id);\r\n                                    setModalInfo({})},\r\n                                  cancel: function(){\r\n                                    setModalInfo({})}\r\n                                });                                \r\n                            }}>\r\n                                <div className={\"gm_x-button\"}></div>\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </DataListAction>\r\n                  :\"\"}\r\n                </DataListItemRow>\r\n              </DataListItem>\r\n            }):noAdmins()}\r\n          </DataList> \r\n          <div className=\"gm_add-admin-container\">\r\n            <h1>Add New Group Admin</h1>\r\n            <p>Use the input to search for a user to add as a group admin, or type a valid email address to send an invitation.</p>\r\n\r\n            <div className=\"gm_add-admin-input\">\r\n              <div>\r\n              <Select\r\n                variant={SelectVariant.typeahead}\r\n                typeAheadAriaLabel=\"Select a state\"\r\n                onToggle={onToggle}\r\n                onSelect={()=>{}}\r\n                onClear={clearSelection}\r\n                selections={selected}\r\n                createText=\"Invite with email\"\r\n                onCreateOption={(value)=>{\r\n                  if(ValidateEmail(value)){\r\n                    setInviteAddress(value)\r\n                  }\r\n                  else{\r\n                    setInviteAddress(\"\");\r\n                    setEmailError(true);\r\n                  }\r\n                  setSelected(value);\r\n                  setIsOpen(false);\r\n\r\n                }}\r\n                onFilter={(e,searchString)=>{\r\n                  setInviteAddress(\"\");\r\n                  setSelectedUserId(\"\");\r\n                  setEmailError(false);\r\n                  let filterOptions :any = []\r\n                  fetchGroupMembers(searchString);\r\n                  options.forEach((option, index) => (\r\n                    filterOptions.push(\r\n                    <SelectOption\r\n                    isDisabled={option.disabled}\r\n                    key={index}\r\n                    onClick={()=>{\r\n                      setInviteAddress(\"\");\r\n                      if(option.id){\r\n                        setSelectedUserId(option.id);\r\n                        if(option.value==='Name Not Available'){\r\n                          setSelected(option.description);\r\n                        }\r\n                        else{ \r\n                          setSelected(option.value);\r\n                        }\r\n                      }\r\n                      setIsOpen(false);\r\n                    }}\r\n                    value={option.value+ (option.disabled?' (Already an Admin)':\"\")}\r\n                    {...(option.description && { description: option.description })}\r\n                    />)\r\n                  ))\r\n                  return filterOptions;\r\n                }}\r\n                isOpen={isOpen}\r\n                aria-labelledby={titleId}\r\n                isInputValuePersisted={true}\r\n                placeholderText=\"Select a user\"\r\n                isCreatable={true}\r\n              >\r\n              {options.map((option, index) => (\r\n                  <SelectOption\r\n                  isDisabled={option.disabled}\r\n                  key={index}\r\n                  onClick={()=>{\r\n                    setInviteAddress(\"\");\r\n                    if(option.id){\r\n                      setSelectedUserId(option.id);\r\n                      if(option.value==='Name Not Available'){\r\n                        setSelected(option.description);\r\n                      }\r\n                      else{ \r\n                        setSelected(option.value);\r\n                      }\r\n                    }\r\n                    setIsOpen(false);\r\n                  }}\r\n                  value={option.value + (option.disabled?' (Already an Admin)':\"\")}\r\n                  {...(option.description && { description: option.description })}\r\n                  />\r\n              ))}\r\n              </Select>\r\n              {successMessage?<FormAlert>\r\n                <Alert variant=\"success\" title={successMessage} aria-live=\"polite\" isInline />\r\n              </FormAlert>:null}\r\n              {emailError?<FormAlert>\r\n                <Alert variant=\"danger\" title=\"Invalid Email\" aria-live=\"polite\" isInline />\r\n              </FormAlert>:null}\r\n              </div>\r\n              <Tooltip content={<div>{selectedUserId?\"Add selected user as an admin to this group.\":emailError?\"To send an invitation please provide a valid email address.\":inviteAddress?\"Send invitation to become a group admin.\":\"Select a user or provide a valid a valid email address to add/invite a user to become a group admin.\"}</div>}>\r\n                <Button isDisabled={!(selectedUserId||(!emailError&&inviteAddress))}  className={\"gm_admin-button \"+(inviteAddress||emailError?\"gm_invitation-button\":\"gm_add-admin-button\")} onClick={()=>{\r\n                    if(selectedUserId){\r\n                      setModalInfo({\r\n                        title:\"Confirmation\",\r\n                        accept_message: \"YES\",\r\n                        cancel_message: \"NO\",\r\n                        message: (\"Are you sure you want to add this user (\"+  selected +\") as an admin to this group.\"),\r\n                        accept: function(){\r\n                          makeAdmin(selectedUserId);\r\n                          setModalInfo({})},\r\n                        cancel: function(){\r\n                          setModalInfo({})}\r\n                      });\r\n                    }\r\n                    if(inviteAddress){\r\n                      setModalInfo({\r\n                        title:\"Confirmation\",\r\n                        accept_message: \"YES\",\r\n                        cancel_message: \"NO\",\r\n                        message: (\"Are you sure you want to send an invitation to this address (\"+  selected +\").\"),\r\n                        accept: function(){\r\n                          sendInvitation(inviteAddress);\r\n                          setModalInfo({})},\r\n                        cancel: function(){\r\n                          setModalInfo({})}\r\n                      });\r\n                      \r\n                    }\r\n                  }}>\r\n                    <div></div>\r\n                </Button>\r\n              </Tooltip>\r\n            </div>  \r\n            \r\n\r\n          </div>\r\n        </React.Fragment>         \r\n   \r\n    )\r\n}\r\n"],"file":"GroupAdmins.js"}